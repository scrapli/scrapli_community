{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"scrapli community","text":"<p>This is the scrapli_community repository for scrapli.</p> <p>If you would like to use scrapli, but the platform(s) that you work with are not supported in the \"core\" scrapli  platforms, you have come to the right place! This library is intended to be a place for scrapli users to add   additional platform support to scrapli.</p> <p>Please see the main scrapli repo for much more information about the main  project.</p>"},{"location":"changelog/","title":"CHANGELOG","text":""},{"location":"changelog/#20230130","title":"2023.01.30","text":"<ul> <li>Add Ruckus Unleashed -- see #143</li> <li>Add Cumulus Linux &amp; vtysh -- see #144</li> <li>Add Raisecom ROS (thank you to @ikievite) -- see #149</li> <li>Add dlink OS (thank you to @ikievite) -- see #151</li> <li>Improve Huawei VRP prompt pattern in #146</li> </ul>"},{"location":"changelog/#20220730","title":"2022.07.30","text":"<ul> <li>Add Versa Flex VNF -- see #119</li> <li>Add Vyos -- see #134</li> <li>Updated Huawei prompt for config mode -- see #118</li> </ul>"},{"location":"changelog/#20220130","title":"2022.01.30","text":"<ul> <li>Add Cisco CBS -- see #76</li> <li>Add Aruba AOSCX -- see #80</li> <li>Dropped Python3.6 support as it is now EOL! Of course, scrapli probably still works just fine with 3.6 (if you    install the old 3.6 requirements), but we won't test/support it anymore.</li> </ul>"},{"location":"changelog/#20210730","title":"2021.07.30","text":"<ul> <li>Add HP Comware (thank you to Julien!) -- see #36</li> <li>Add Nokia SROS (thank you to Roman Dodin!) -- see #51</li> <li>Fixed silly naming of the sync/async module in each package to match scrapli core naming standard</li> <li>Add Alcatel AOS (thank you to Jef Vantongerloo) -- see #58</li> <li>Add Palo Alto PanOS (thank you to Bryan Bartik) -- see #69</li> </ul>"},{"location":"changelog/#20210130","title":"2021.01.30","text":"<ul> <li>Add Siemens ROX II (thank you again Khiem Nguyen!) -- see #31</li> <li>Updated privilege level imports location to match scrapli core overhaul</li> </ul>"},{"location":"changelog/#20201115","title":"2020.11.15","text":"<ul> <li>Add Fortinet WLC (thank you again Alex!) -- see #6</li> <li>Add Aethra ATOSNT (Alex!!!) -- see #9</li> <li>Fix screen width on Huawei VRP (Alex again!) -- see #18</li> </ul>"},{"location":"changelog/#20200919","title":"2020.09.19","text":"<ul> <li>Add Ruckus FastIron Platform (thank you Brett!)</li> <li>Add Edgecore ECS Platform (thank you Alex!)</li> <li>Add some bits to the example scrapli driver for testing purposes for scrapli core ++ supporting users creating  their own device classes so they can build custom methods/override existing methods</li> <li>Add 3.9 to weekly/commit testing</li> </ul>"},{"location":"changelog/#20200808","title":"2020.08.08","text":"<ul> <li>First draft of scrapli_community!</li> </ul>"},{"location":"about/code_of_conduct/","title":"Code of Conduct","text":"<p>Be excellent to each other!</p>"},{"location":"about/contributing/","title":"Contributing","text":"<p>Thanks for thinking about contributing! Contributions are not expected, but are quite welcome.</p> <p>Contributions of all kinds are welcomed -- typos, doc updates, adding examples, bug fixes, and feature adds.</p> <p>Some notes on contributing:</p> <ul> <li>Please open a GitHub discussion topic for any potential feature adds/changes to discuss them prior to opening a PR,   this way everyone has a chance to chime in and make sure we're all on the same page!</li> <li>Please open an issue to discuss any bugs/bug fixes prior to opening a PR.</li> <li>Once we all have discussed any adds/changes, pull requests are very much welcome and appreciated!</li> <li>All PRs should pass tests/CI linting -- checkout the Makefile for some shortcuts for linting and testing.</li> <li>Please include tests! Even simple/basic tests are better than nothing -- it helps make sure changes in the future    don't break functionality or make things act in unexpected ways!</li> </ul>"},{"location":"more_scrapli/nornir_scrapli/","title":"Nornir scrapli","text":"<p>If you want to use scrapli, but don't want to deal with handling concurrency yourself, there is great news! The  nornir_scrapli plugin allows you to use scrapli (and scrapli netconf  and scrapli cfg) within the Nornir framework!</p>"},{"location":"more_scrapli/scrapli/","title":"Scrapli","text":"<p>scrapli (docs) is the  \"parent\" scrapli library. Check it out if you need to connect to devices with telnet or ssh!</p>"},{"location":"more_scrapli/scrapli_cfg/","title":"Scrapli Cfg","text":"<p>scrapli_cfg (docs)  is utility that accepts a scrapli Telnet or SSH connection and provides configuration management capabilities.  scrapli_cfg allows you to load candidate configurations for merge or replace operations, generate diffs of the  current vs candidate, and of course commit or abort the candidate configuration.</p>"},{"location":"more_scrapli/scrapli_netconf/","title":"Scrapli Netconf","text":"<p>scrapli_netconf (docs)  is a netconf driver built on top of scrapli. The purpose of scrapli_netconf is to provide a fast, flexible,  thoroughly tested, well typed, well documented, simple API that supports both synchronous and asynchronous usage.  Working together scrapli and scrapli_netconf aim to provide a consistent (as is practical) look and feel when  automating devices over telnet, SSH, or netconf (over SSH).</p>"},{"location":"more_scrapli/scrapli_replay/","title":"Scrapli Replay","text":"<p>scrapli_replay (docs)  is a set of tools used to help test scrapli programs. scrapli_replay includes a utility to capture command  input/output from real life servers and replay them in a semi-interactive fashion, as well as a pytest plugin that  patches and records and replays session data (like vcr.py) for scrapli connections. </p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>aethra<ul> <li>atosnt<ul> <li>aethra_atosnt</li> <li>async_diver</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>alcatel<ul> <li>aos<ul> <li>alcatel_aos</li> <li>async_driver</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>aruba<ul> <li>aoscx<ul> <li>aruba_aoscx</li> <li>async_driver</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>cisco<ul> <li>aireos<ul> <li>async_driver</li> <li>cisco_aireos</li> <li>sync_driver</li> </ul> </li> <li>asa<ul> <li>async_driver</li> <li>cisco_asa</li> <li>sync_driver</li> </ul> </li> <li>cbs<ul> <li>async_driver</li> <li>cisco_cbs</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>cumulus<ul> <li>linux<ul> <li>async_driver</li> <li>cumulus_linux</li> <li>sync_driver</li> </ul> </li> <li>vtysh<ul> <li>async_driver</li> <li>cumulus_vtysh</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>dlink<ul> <li>os<ul> <li>async_driver</li> <li>dlink_os</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>edgecore<ul> <li>ecs<ul> <li>async_driver</li> <li>edgecore_ecs</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>eltex<ul> <li>esr<ul> <li>async_driver</li> <li>eltex_esr</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>fortinet<ul> <li>wlc<ul> <li>async_driver</li> <li>fortinet_wlc</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>hp<ul> <li>comware<ul> <li>async_driver</li> <li>hp_comware</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>huawei<ul> <li>vrp<ul> <li>async_driver</li> <li>huawei_vrp</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>mikrotik<ul> <li>routeros<ul> <li>async_driver</li> <li>mikrotik_routeros</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>nokia<ul> <li>srlinux<ul> <li>async_driver</li> <li>nokia_srlinux</li> <li>sync_driver</li> </ul> </li> <li>sros<ul> <li>async_driver</li> <li>nokia_sros</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>paloalto<ul> <li>panos<ul> <li>async_driver</li> <li>paloalto_panos</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>raisecom<ul> <li>ros<ul> <li>async_driver</li> <li>raisecom_ros</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>ruckus<ul> <li>fastiron<ul> <li>async_driver</li> <li>ruckus_fastiron</li> <li>sync_driver</li> </ul> </li> <li>unleashed<ul> <li>async_driver</li> <li>ruckus_unleashed</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>scrapli<ul> <li>genericdriver<ul> <li>async_driver</li> <li>scrapli_genericdriver</li> <li>sync_driver</li> </ul> </li> <li>networkdriver<ul> <li>async_driver</li> <li>scrapli_networkdriver</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>siemens<ul> <li>roxii<ul> <li>async_driver</li> <li>siemens_roxii</li> <li>sync_driver</li> </ul> </li> </ul> </li> <li>versa<ul> <li>flexvnf<ul> <li>async_driver</li> <li>sync_driver</li> <li>versa_flexvnf</li> </ul> </li> </ul> </li> <li>vyos<ul> <li>vyos<ul> <li>async_driver</li> <li>sync_driver</li> <li>vyos</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/aethra/","title":"Index","text":"<p>scrapli_community.aethra</p>"},{"location":"reference/aethra/atosnt/","title":"Index","text":"<p>scrapli_community.aethra.atosnt</p>"},{"location":"reference/aethra/atosnt/aethra_atosnt/","title":"Aethra atosnt","text":"<p>scrapli_community.aethra.atosnt.aethra_atosnt</p>"},{"location":"reference/aethra/atosnt/async_diver/","title":"Async diver","text":"<p>scrapli_community.aethra.atosnt.async_driver</p>"},{"location":"reference/aethra/atosnt/async_diver/#aethra.atosnt.async_diver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncGenericDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async aethra_atosnt default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncGenericDriver</code> <p>AsyncGenericDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>aethra/atosnt/async_diver.py</code> <pre><code>async def default_async_on_close(conn: AsyncGenericDriver) -&gt; None:\n\"\"\"\n    Async aethra_atosnt default on_close callable\n\n    Args:\n        conn: AsyncGenericDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.channel.write(channel_input=\"\\x04\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/aethra/atosnt/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.aethra.atosnt.sync_driver</p>"},{"location":"reference/aethra/atosnt/sync_driver/#aethra.atosnt.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: GenericDriver) -&gt; None</code>","text":"<p>aethra_atosnt default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>GenericDriver</code> <p>GenericDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>aethra/atosnt/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: GenericDriver) -&gt; None:\n\"\"\"\n    aethra_atosnt default on_close callable\n\n    Args:\n        conn: GenericDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.channel.write(channel_input=\"\\x04\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/alcatel/","title":"Index","text":"<p>scrapli_community.alcatel</p>"},{"location":"reference/alcatel/aos/","title":"Index","text":"<p>scrapli_community.alcatel.aos</p>"},{"location":"reference/alcatel/aos/alcatel_aos/","title":"Alcatel aos","text":"<p>scrapli_community.alcatel.aos.alcatel_aos</p>"},{"location":"reference/alcatel/aos/async_driver/","title":"Async driver","text":"<p>scrapli_community.alcatel.aos.async_driver</p>"},{"location":"reference/alcatel/aos/async_driver/#alcatel.aos.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncGenericDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async alcatel_aos default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncGenericDriver</code> <p>AsyncGenericDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>alcatel/aos/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncGenericDriver) -&gt; None:\n\"\"\"\n    Async alcatel_aos default on_close callable\n\n    Args:\n        conn: AsyncGenericDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/alcatel/aos/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.alcatel.aos.sync_driver</p>"},{"location":"reference/alcatel/aos/sync_driver/#alcatel.aos.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: GenericDriver) -&gt; None</code>","text":"<p>alcatel_aos default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>GenericDriver</code> <p>GenericDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>alcatel/aos/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: GenericDriver) -&gt; None:\n\"\"\"\n    alcatel_aos default on_close callable\n\n    Args:\n        conn: GenericDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/aruba/","title":"Index","text":"<p>scrapli_community.aruba</p>"},{"location":"reference/aruba/aoscx/","title":"Index","text":"<p>scrapli_community.aruba.aruba_aoscx</p>"},{"location":"reference/aruba/aoscx/aruba_aoscx/","title":"Aruba aoscx","text":"<p>scrapli_community.aruba.aoscx.aruba_aoscx</p>"},{"location":"reference/aruba/aoscx/async_driver/","title":"Async driver","text":"<p>scrapli_community.aruba.aoscx.ansync_driver</p>"},{"location":"reference/aruba/aoscx/async_driver/#aruba.aoscx.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async aruba_aoscx default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>aruba/aoscx/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async aruba_aoscx default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    # write exit directly to the transport as channel would fail to find the prompt after sending\n    # the exit command!\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"end\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/aruba/aoscx/async_driver/#aruba.aoscx.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async aruba_aoscx default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>aruba/aoscx/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async aruba_aoscx default on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"no page\")\n</code></pre>"},{"location":"reference/aruba/aoscx/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.aruba.aoscx.aruba_aoscx</p>"},{"location":"reference/aruba/aoscx/sync_driver/#aruba.aoscx.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>aruba_aoscx default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>aruba/aoscx/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    aruba_aoscx default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    # write exit directly to the transport as channel would fail to find the prompt after sending\n    # the exit command!\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/aruba/aoscx/sync_driver/#aruba.aoscx.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>aruba_aoscx default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>aruba/aoscx/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    aruba_aoscx default on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"no page\")\n</code></pre>"},{"location":"reference/cisco/","title":"Index","text":"<p>scrapli_community.cisco</p>"},{"location":"reference/cisco/aireos/","title":"Index","text":"<p>scrapli_community.cisco.aireos</p>"},{"location":"reference/cisco/aireos/async_driver/","title":"Async driver","text":"<p>scrapli_community.cisco.aireos.async_driver</p>"},{"location":"reference/cisco/aireos/async_driver/#cisco.aireos.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async cisco_aireos default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>cisco/aireos/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async cisco_aireos default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"logout\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/cisco/aireos/async_driver/#cisco.aireos.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async cisco_aireos default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>cisco/aireos/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async cisco_aireos default on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    # Due to Cisco AireOS devices not having a true SSH authentication, the following\n    # technique has been employed to send the auth_username and auth_password to the device\n    # to handle the initial authentication.\n    # Reference Doco:\n    # https://carlmontanari.github.io/scrapli/user_guide/advanced_usage/#auth-bypass\n    # https://github.com/carlmontanari/scrapli/blob/master/examples/non_core_device/wlc.py#L25\n    time.sleep(0.25)\n    conn.channel.write(conn.auth_username)\n    conn.channel.send_return()\n    time.sleep(0.25)\n    conn.channel.write(conn.auth_password)\n    conn.channel.send_return()\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"config paging disable\")\n</code></pre>"},{"location":"reference/cisco/aireos/cisco_aireos/","title":"Cisco aireos","text":"<p>scrapli_community.cisco.aireos.cisco_aireos</p>"},{"location":"reference/cisco/aireos/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.cisco.aireos.sync_driver</p>"},{"location":"reference/cisco/aireos/sync_driver/#cisco.aireos.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>cisco_aireos default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>cisco/aireos/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    cisco_aireos default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"logout\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/cisco/aireos/sync_driver/#cisco.aireos.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>Async cisco_aireos default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>cisco/aireos/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    Async cisco_aireos default on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    # Due to Cisco AireOS devices not having a true SSH authentication, the following\n    # technique has been employed to send the auth_username and auth_password to the device\n    # to handle the initial authentication.\n    # Reference Doco:\n    # https://carlmontanari.github.io/scrapli/user_guide/advanced_usage/#auth-bypass\n    # https://github.com/carlmontanari/scrapli/blob/master/examples/non_core_device/wlc.py#L25\n    time.sleep(0.25)\n    conn.channel.write(conn.auth_username)\n    conn.channel.send_return()\n    time.sleep(0.25)\n    conn.channel.write(conn.auth_password)\n    conn.channel.send_return()\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"config paging disable\")\n</code></pre>"},{"location":"reference/cisco/asa/","title":"Index","text":"<p>scrapli_community.cisco.asa</p>"},{"location":"reference/cisco/asa/async_driver/","title":"Async driver","text":"<p>scrapli_community.cisco.asa.async_driver</p>"},{"location":"reference/cisco/asa/async_driver/#cisco.asa.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async cisco_asa default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>cisco/asa/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async cisco_asa default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"logout\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/cisco/asa/async_driver/#cisco.asa.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async cisco_asa default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>cisco/asa/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async cisco_asa default on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"terminal pager 0\")\n    await conn.send_config(config=\"terminal width 511\")\n</code></pre>"},{"location":"reference/cisco/asa/async_driver/#cisco.asa.async_driver.read_only_async_on_open","title":"<code>read_only_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async cisco_asa read-only on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>cisco/asa/async_driver.py</code> <pre><code>async def read_only_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async cisco_asa read-only on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"terminal pager 0\")\n</code></pre>"},{"location":"reference/cisco/asa/cisco_asa/","title":"Cisco asa","text":"<p>scrapli_community.cisco.asa.cisco_asa</p>"},{"location":"reference/cisco/asa/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.cisco.asa.sync_driver</p>"},{"location":"reference/cisco/asa/sync_driver/#cisco.asa.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>cisco_asa default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>cisco/asa/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    cisco_asa default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"logout\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/cisco/asa/sync_driver/#cisco.asa.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>Async cisco_asa default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>cisco/asa/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    Async cisco_asa default on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"terminal pager 0\")\n    conn.send_config(config=\"terminal width 511\")\n</code></pre>"},{"location":"reference/cisco/asa/sync_driver/#cisco.asa.sync_driver.read_only_sync_on_open","title":"<code>read_only_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>Async cisco_asa read-only on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>cisco/asa/sync_driver.py</code> <pre><code>def read_only_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    Async cisco_asa read-only on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"terminal pager 0\")\n</code></pre>"},{"location":"reference/cisco/cbs/","title":"Index","text":"<p>scrapli_community.cisco.cbs</p>"},{"location":"reference/cisco/cbs/async_driver/","title":"Async driver","text":"<p>scrapli_community.cisco.cbs.async_driver</p>"},{"location":"reference/cisco/cbs/async_driver/#cisco.cbs.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>cisco_cbs default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cisco/cbs/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    cisco_cbs default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/cisco/cbs/async_driver/#cisco.cbs.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>cisco_cbs on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cisco/cbs/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    cisco_cbs on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"terminal datadump\")\n    await conn.send_command(command=\"terminal width 0\")\n</code></pre>"},{"location":"reference/cisco/cbs/cisco_cbs/","title":"Cisco cbs","text":"<p>scrapli_community.cisco.cbs.cisco_cbs</p>"},{"location":"reference/cisco/cbs/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.cisco.cbs.sync_driver</p>"},{"location":"reference/cisco/cbs/sync_driver/#cisco.cbs.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>cisco_cbs default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cisco/cbs/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    cisco_cbs default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/cisco/cbs/sync_driver/#cisco.cbs.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>cisco_cbs on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cisco/cbs/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    cisco_cbs on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"terminal datadump\")\n    conn.send_command(command=\"terminal width 0\")\n</code></pre>"},{"location":"reference/cumulus/","title":"Index","text":"<p>scrapli_community.cumulus</p>"},{"location":"reference/cumulus/linux/","title":"Index","text":"<p>scrapli_community.cumulus.linux</p>"},{"location":"reference/cumulus/linux/async_driver/","title":"Async driver","text":"<p>scrapli_community.cumulus.linux.async_driver</p>"},{"location":"reference/cumulus/linux/async_driver/#cumulus.linux.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>cumulus_linux default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cumulus/linux/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    cumulus_linux default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/cumulus/linux/async_driver/#cumulus.linux.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>cumulus_linux on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cumulus/linux/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    cumulus_linux on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n</code></pre>"},{"location":"reference/cumulus/linux/cumulus_linux/","title":"Cumulus linux","text":"<p>scrapli_community.cumulus.linux.cumulus_linux</p>"},{"location":"reference/cumulus/linux/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.cumulus.linux.sync_driver</p>"},{"location":"reference/cumulus/linux/sync_driver/#cumulus.linux.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>cumulus_linux default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cumulus/linux/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    cumulus_linux default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/cumulus/linux/sync_driver/#cumulus.linux.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>cumulus_linux on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cumulus/linux/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    cumulus_linux on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n</code></pre>"},{"location":"reference/cumulus/vtysh/","title":"Index","text":"<p>scrapli_community.cumulus.vtysh</p>"},{"location":"reference/cumulus/vtysh/async_driver/","title":"Async driver","text":"<p>scrapli_community.cumulus.vtysh.async_driver</p>"},{"location":"reference/cumulus/vtysh/async_driver/#cumulus.vtysh.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>cumulus_vtysh default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cumulus/vtysh/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    cumulus_vtysh default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/cumulus/vtysh/async_driver/#cumulus.vtysh.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>cumulus_vtysh on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cumulus/vtysh/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    cumulus_vtysh on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n</code></pre>"},{"location":"reference/cumulus/vtysh/cumulus_vtysh/","title":"Cumulus vtysh","text":"<p>scrapli_community.cumulus.vtysh.cumulus_vtysh</p>"},{"location":"reference/cumulus/vtysh/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.cumulus.vtysh.sync_driver</p>"},{"location":"reference/cumulus/vtysh/sync_driver/#cumulus.vtysh.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>cumulus_vtysh default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cumulus/vtysh/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    cumulus_vtysh default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/cumulus/vtysh/sync_driver/#cumulus.vtysh.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>cumulus_vtysh on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cumulus/vtysh/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    cumulus_vtysh on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n</code></pre>"},{"location":"reference/dlink/","title":"Index","text":"<p>scrapli_community.dlink</p>"},{"location":"reference/dlink/os/","title":"Index","text":"<p>scrapli_community.dlink.os</p>"},{"location":"reference/dlink/os/async_driver/","title":"Async driver","text":"<p>scrapli_community.dlink.os.async_driver</p>"},{"location":"reference/dlink/os/async_driver/#dlink.os.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async dlink_os default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>dlink/os/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async dlink_os default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    # write exit directly to the transport as channel would fail to find the prompt after sending\n    # the exit command!\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"enable clipaging\")\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/dlink/os/async_driver/#dlink.os.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async dlink_os default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>dlink/os/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async dlink_os default on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"disable clipaging\")\n</code></pre>"},{"location":"reference/dlink/os/dlink_os/","title":"Dlink os","text":"<p>scrapli_community.dlink.os.dlink_os</p>"},{"location":"reference/dlink/os/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.dlink.os.sync_driver</p>"},{"location":"reference/dlink/os/sync_driver/#dlink.os.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>Default dlink_os on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>dlink/os/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    Default dlink_os on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    # write exit directly to the transport as channel would fail to find the prompt after sending\n    # the exit command!\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"enable clipaging\")\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/dlink/os/sync_driver/#dlink.os.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>Default dlink_os on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>dlink/os/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    Default dlink_os on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"disable clipaging\")\n</code></pre>"},{"location":"reference/edgecore/","title":"Index","text":"<p>scrapli_community.edgecore</p>"},{"location":"reference/edgecore/ecs/","title":"Index","text":"<p>scrapli_community.edgecore.ecs</p>"},{"location":"reference/edgecore/ecs/async_driver/","title":"Async driver","text":"<p>scrapli_community.edgecore.ecs.async_driver</p>"},{"location":"reference/edgecore/ecs/async_driver/#edgecore.ecs.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async edgecore_ecs default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>edgecore/ecs/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async edgecore_ecs default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/edgecore/ecs/async_driver/#edgecore.ecs.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async edgecore_ecs default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>edgecore/ecs/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async edgecore_ecs default on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n\n    await conn.send_command(command=\"terminal length 0\")\n    await conn.send_command(command=\"terminal width 300\")\n</code></pre>"},{"location":"reference/edgecore/ecs/edgecore_ecs/","title":"Edgecore ecs","text":"<p>scrapli_community.edgecore.ecs.edgecore_ecs</p>"},{"location":"reference/edgecore/ecs/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.edgecore.ecs.sync_driver</p>"},{"location":"reference/edgecore/ecs/sync_driver/#edgecore.ecs.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>edgecore_ecs default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>edgecore/ecs/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    edgecore_ecs default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/edgecore/ecs/sync_driver/#edgecore.ecs.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>edgecore_ecs on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>edgecore/ecs/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    edgecore_ecs on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n\n    conn.send_command(command=\"terminal length 0\")\n    conn.send_command(command=\"terminal width 300\")\n</code></pre>"},{"location":"reference/eltex/","title":"Index","text":"<p>scrapli_community.eltex</p>"},{"location":"reference/eltex/esr/","title":"Index","text":"<p>scrapli_community.eltex.esr</p>"},{"location":"reference/eltex/esr/async_driver/","title":"Async driver","text":"<p>scrapli_community.eltex.esr.async_driver</p>"},{"location":"reference/eltex/esr/async_driver/#eltex.esr.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async exltex_esr default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>eltex/esr/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async exltex_esr default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/eltex/esr/async_driver/#eltex.esr.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async exltex_esr default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>eltex/esr/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async exltex_esr default on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"terminal datadump\")\n</code></pre>"},{"location":"reference/eltex/esr/eltex_esr/","title":"Eltex esr","text":"<p>scrapli_community.eltex.esr.exltex_esr</p>"},{"location":"reference/eltex/esr/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.eltex.esr.sync_driver</p>"},{"location":"reference/eltex/esr/sync_driver/#eltex.esr.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>exltex_esr default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>eltex/esr/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    exltex_esr default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    # write exit directly to the transport as channel would fail to find the prompt after sending\n    # the exit command!\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/eltex/esr/sync_driver/#eltex.esr.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>exltex_esr on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>eltex/esr/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    exltex_esr on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"terminal datadump\")\n</code></pre>"},{"location":"reference/fortinet/","title":"Index","text":"<p>scrapli_community.fortinet</p>"},{"location":"reference/fortinet/wlc/","title":"Index","text":"<p>scrapli_community.fortinet.wlc</p>"},{"location":"reference/fortinet/wlc/async_driver/","title":"Async driver","text":"<p>scrapli_community.fortinet.wlc.async_driver</p>"},{"location":"reference/fortinet/wlc/async_driver/#fortinet.wlc.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async fortinet_wlc default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>fortinet/wlc/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async fortinet_wlc default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.channel.write(channel_input=\"q\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/fortinet/wlc/async_driver/#fortinet.wlc.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async fortinet_wlc default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>fortinet/wlc/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async fortinet_wlc default on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n</code></pre>"},{"location":"reference/fortinet/wlc/fortinet_wlc/","title":"Fortinet wlc","text":"<p>scrapli_community.fortinet.wlc.fortinet_wlc</p>"},{"location":"reference/fortinet/wlc/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.fortinet.wlc.sync_driver</p>"},{"location":"reference/fortinet/wlc/sync_driver/#fortinet.wlc.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>fortinet_wlc default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>fortinet/wlc/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    fortinet_wlc default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.channel.write(channel_input=\"q\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/fortinet/wlc/sync_driver/#fortinet.wlc.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>fortinet_wlc on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>fortinet/wlc/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    fortinet_wlc on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n</code></pre>"},{"location":"reference/hp/","title":"Index","text":"<p>scrapli_community.hp</p>"},{"location":"reference/hp/comware/","title":"Index","text":"<p>scrapli_community.hp.comware</p>"},{"location":"reference/hp/comware/async_driver/","title":"Async driver","text":"<p>scrapli_community.hp.comware.async_driver</p>"},{"location":"reference/hp/comware/async_driver/#hp.comware.async_driver.AsyncHPComwareDriver","title":"<code>AsyncHPComwareDriver</code>","text":"<p>         Bases: <code>AsyncNetworkDriver</code></p> Source code in <code>hp/comware/async_driver.py</code> <pre><code>class AsyncHPComwareDriver(AsyncNetworkDriver):\n    def __init__(self, **kwargs: Any) -&gt; None:\n\"\"\"\n        HP Comware platform class\n\n        Args:\n            kwargs: keyword args\n\n        Returns:\n            N/A\n\n        Raises:\n            N/A\n\n        \"\"\"\n        # *if* using anything but system transport pop out ptyprocess transport options, leaving\n        # anything else\n        transport_plugin = kwargs.get(\"transport\", \"system\")\n        if transport_plugin != \"system\":\n            kwargs.get(\"transport_options\", {}).pop(\"ptyprocess\", None)\n\n        super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/hp/comware/async_driver/#hp.comware.async_driver.AsyncHPComwareDriver.__init__","title":"<code>__init__(**kwargs: Any) -&gt; None</code>","text":"<p>HP Comware platform class</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>keyword args</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>hp/comware/async_driver.py</code> <pre><code>def __init__(self, **kwargs: Any) -&gt; None:\n\"\"\"\n    HP Comware platform class\n\n    Args:\n        kwargs: keyword args\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    # *if* using anything but system transport pop out ptyprocess transport options, leaving\n    # anything else\n    transport_plugin = kwargs.get(\"transport\", \"system\")\n    if transport_plugin != \"system\":\n        kwargs.get(\"transport_options\", {}).pop(\"ptyprocess\", None)\n\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/hp/comware/async_driver/#hp.comware.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async hp_comware default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>hp/comware/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async hp_comware default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"quit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/hp/comware/async_driver/#hp.comware.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async hp_comware default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>hp/comware/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async hp_comware default on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"screen-length disable\")\n</code></pre>"},{"location":"reference/hp/comware/hp_comware/","title":"Hp comware","text":"<p>scrapli_community.hp.comware.hp_comware</p>"},{"location":"reference/hp/comware/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.hp.comware.sync_driver</p>"},{"location":"reference/hp/comware/sync_driver/#hp.comware.sync_driver.HPComwareDriver","title":"<code>HPComwareDriver</code>","text":"<p>         Bases: <code>NetworkDriver</code></p> Source code in <code>hp/comware/sync_driver.py</code> <pre><code>class HPComwareDriver(NetworkDriver):\n    def __init__(self, **kwargs: Any) -&gt; None:\n\"\"\"\n        HP Comware platform class\n\n        Args:\n            kwargs: keyword args\n\n        Returns:\n            N/A\n\n        Raises:\n            N/A\n\n        \"\"\"\n        # *if* using anything but system transport pop out ptyprocess transport options, leaving\n        # anything else\n        transport_plugin = kwargs.get(\"transport\", \"system\")\n        if transport_plugin != \"system\":\n            kwargs.get(\"transport_options\", {}).pop(\"ptyprocess\", None)\n\n        super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/hp/comware/sync_driver/#hp.comware.sync_driver.HPComwareDriver.__init__","title":"<code>__init__(**kwargs: Any) -&gt; None</code>","text":"<p>HP Comware platform class</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>keyword args</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>hp/comware/sync_driver.py</code> <pre><code>def __init__(self, **kwargs: Any) -&gt; None:\n\"\"\"\n    HP Comware platform class\n\n    Args:\n        kwargs: keyword args\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    # *if* using anything but system transport pop out ptyprocess transport options, leaving\n    # anything else\n    transport_plugin = kwargs.get(\"transport\", \"system\")\n    if transport_plugin != \"system\":\n        kwargs.get(\"transport_options\", {}).pop(\"ptyprocess\", None)\n\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/hp/comware/sync_driver/#hp.comware.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>hp_comware default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>hp/comware/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    hp_comware default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"quit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/hp/comware/sync_driver/#hp.comware.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>hp_comware on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>hp/comware/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    hp_comware on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"screen-length disable\")\n</code></pre>"},{"location":"reference/huawei/","title":"Index","text":"<p>scrapli_community.huawei</p>"},{"location":"reference/huawei/vrp/","title":"Index","text":"<p>scrapli_community.huawei.vrp</p>"},{"location":"reference/huawei/vrp/async_driver/","title":"Async driver","text":"<p>scrapli_community.huawei.vrp.async_driver</p>"},{"location":"reference/huawei/vrp/async_driver/#huawei.vrp.async_driver.AsyncHuaweiVRPDriver","title":"<code>AsyncHuaweiVRPDriver</code>","text":"<p>         Bases: <code>AsyncNetworkDriver</code></p> Source code in <code>huawei/vrp/async_driver.py</code> <pre><code>class AsyncHuaweiVRPDriver(AsyncNetworkDriver):\n    def __init__(self, **kwargs: Any) -&gt; None:\n\"\"\"\n        Huawei VRP platform class\n\n        Args:\n            kwargs: keyword args\n\n        Returns:\n            N/A\n\n        Raises:\n            N/A\n\n        \"\"\"\n        # *if* using anything but system transport pop out ptyprocess transport options, leaving\n        # anything else\n        transport_plugin = kwargs.get(\"transport\", \"system\")\n        if transport_plugin != \"system\":\n            kwargs.get(\"transport_options\", {}).pop(\"ptyprocess\", None)\n\n        super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/huawei/vrp/async_driver/#huawei.vrp.async_driver.AsyncHuaweiVRPDriver.__init__","title":"<code>__init__(**kwargs: Any) -&gt; None</code>","text":"<p>Huawei VRP platform class</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>keyword args</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>huawei/vrp/async_driver.py</code> <pre><code>def __init__(self, **kwargs: Any) -&gt; None:\n\"\"\"\n    Huawei VRP platform class\n\n    Args:\n        kwargs: keyword args\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    # *if* using anything but system transport pop out ptyprocess transport options, leaving\n    # anything else\n    transport_plugin = kwargs.get(\"transport\", \"system\")\n    if transport_plugin != \"system\":\n        kwargs.get(\"transport_options\", {}).pop(\"ptyprocess\", None)\n\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/huawei/vrp/async_driver/#huawei.vrp.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async huawei_vrp default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>huawei/vrp/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async huawei_vrp default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/huawei/vrp/async_driver/#huawei.vrp.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async huawei_vrp default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>huawei/vrp/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async huawei_vrp default on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"screen-length 0 temporary\")\n</code></pre>"},{"location":"reference/huawei/vrp/huawei_vrp/","title":"Huawei vrp","text":"<p>scrapli_community.huawei.vrp.huawei_vrp</p>"},{"location":"reference/huawei/vrp/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.huawei.vrp.sync_driver</p>"},{"location":"reference/huawei/vrp/sync_driver/#huawei.vrp.sync_driver.HuaweiVRPDriver","title":"<code>HuaweiVRPDriver</code>","text":"<p>         Bases: <code>NetworkDriver</code></p> Source code in <code>huawei/vrp/sync_driver.py</code> <pre><code>class HuaweiVRPDriver(NetworkDriver):\n    def __init__(self, **kwargs: Any) -&gt; None:\n\"\"\"\n        Huawei VRP platform class\n\n        Args:\n            kwargs: keyword args\n\n        Returns:\n            N/A\n\n        Raises:\n            N/A\n\n        \"\"\"\n        # *if* using anything but system transport pop out ptyprocess transport options, leaving\n        # anything else\n        transport_plugin = kwargs.get(\"transport\", \"system\")\n        if transport_plugin != \"system\":\n            kwargs.get(\"transport_options\", {}).pop(\"ptyprocess\", None)\n\n        super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/huawei/vrp/sync_driver/#huawei.vrp.sync_driver.HuaweiVRPDriver.__init__","title":"<code>__init__(**kwargs: Any) -&gt; None</code>","text":"<p>Huawei VRP platform class</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>keyword args</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>huawei/vrp/sync_driver.py</code> <pre><code>def __init__(self, **kwargs: Any) -&gt; None:\n\"\"\"\n    Huawei VRP platform class\n\n    Args:\n        kwargs: keyword args\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    # *if* using anything but system transport pop out ptyprocess transport options, leaving\n    # anything else\n    transport_plugin = kwargs.get(\"transport\", \"system\")\n    if transport_plugin != \"system\":\n        kwargs.get(\"transport_options\", {}).pop(\"ptyprocess\", None)\n\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/huawei/vrp/sync_driver/#huawei.vrp.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>huawei_vrp default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>huawei/vrp/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    huawei_vrp default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/huawei/vrp/sync_driver/#huawei.vrp.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>huawei_vrp on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>huawei/vrp/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    huawei_vrp on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"screen-length 0 temporary\")\n</code></pre>"},{"location":"reference/mikrotik/","title":"Index","text":"<p>scrapli_community.mikrotik</p>"},{"location":"reference/mikrotik/routeros/","title":"Index","text":"<p>scrapli_community.mikrotik.routeros</p>"},{"location":"reference/mikrotik/routeros/async_driver/","title":"Async driver","text":"<p>scrapli_community.mikrotik.routeros.async_driver</p>"},{"location":"reference/mikrotik/routeros/async_driver/#mikrotik.routeros.async_driver.AsyncMikrotikRouterOSDriver","title":"<code>AsyncMikrotikRouterOSDriver</code>","text":"<p>         Bases: <code>AsyncGenericDriver</code></p> Source code in <code>mikrotik/routeros/async_driver.py</code> <pre><code>class AsyncMikrotikRouterOSDriver(AsyncGenericDriver):\n    def __init__(self, **kwargs: Any) -&gt; None:\n\"\"\"\n        Mikrotik RouterOS platform class\n\n        Args:\n            kwargs: keyword args\n\n        Returns:\n            N/A\n\n        Raises:\n            N/A\n\n        \"\"\"\n\n        # Append login options to the username according to\n        # https://wiki.mikrotik.com/wiki/Manual:Console_login_process\n        kwargs[\"auth_username\"] += \"+cet511w4098h\"\n\n        super().__init__(**kwargs)\n\n    async def send_command(\n        self,\n        command: str,\n        *,\n        strip_prompt: bool = True,\n        failed_when_contains: Optional[Union[str, List[str]]] = None,\n        timeout_ops: Optional[float] = None,\n    ) -&gt; Response:\n\"\"\"\n        mikrotik_routeros send_command method\n\n        Args:\n            command: string to send to device in privilege exec mode\n            strip_prompt: True/False strip prompt from returned output\n            failed_when_contains: string or list of strings indicating failure if found in response\n            timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for\n                the duration of the operation, value is reset to initial value after operation is\n                completed\n\n        Returns:\n            Response: Scrapli Response object\n\n        Raises:\n            N/A\n\n        \"\"\"\n\n        # RouterOS echoes the prompt/pattern twice after sending a command,\n        # modify the prompt pattern accordingly to catch both echoes.\n        #\n        # [user@HOSTNAME]&gt; /command\\r\\n[user@HOSTNAME]&gt; /command\\r\\nOUTPUT...\n        #\n        old_comms_prompt_pattern = self.comms_prompt_pattern\n        self.comms_prompt_pattern = f\"{old_comms_prompt_pattern}.*{old_comms_prompt_pattern}\"\n\n        response = await super().send_command(\n            command,\n            strip_prompt=strip_prompt,\n            failed_when_contains=failed_when_contains,\n            timeout_ops=timeout_ops,\n        )\n\n        # Change the prompt pattern back to the original one.\n        self.comms_prompt_pattern = old_comms_prompt_pattern\n\n        # Since the command is echoed twice, and scrapli only removes it once, we need to\n        # manually remove the second command echo by stripping the first line from the output.\n        if response.result.count(\"\\n\") &gt; 0 and command in response.result.split(\"\\n\")[0]:\n            response.result = \"\\n\".join(response.result.split(\"\\n\")[1:])\n\n        return response\n</code></pre>"},{"location":"reference/mikrotik/routeros/async_driver/#mikrotik.routeros.async_driver.AsyncMikrotikRouterOSDriver.__init__","title":"<code>__init__(**kwargs: Any) -&gt; None</code>","text":"<p>Mikrotik RouterOS platform class</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>keyword args</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>mikrotik/routeros/async_driver.py</code> <pre><code>def __init__(self, **kwargs: Any) -&gt; None:\n\"\"\"\n    Mikrotik RouterOS platform class\n\n    Args:\n        kwargs: keyword args\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n\n    # Append login options to the username according to\n    # https://wiki.mikrotik.com/wiki/Manual:Console_login_process\n    kwargs[\"auth_username\"] += \"+cet511w4098h\"\n\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/mikrotik/routeros/async_driver/#mikrotik.routeros.async_driver.AsyncMikrotikRouterOSDriver.send_command","title":"<code>send_command(command: str, *, strip_prompt: bool = True, failed_when_contains: Optional[Union[str, List[str]]] = None, timeout_ops: Optional[float] = None) -&gt; Response</code>  <code>async</code>","text":"<p>mikrotik_routeros send_command method</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>string to send to device in privilege exec mode</p> required <code>strip_prompt</code> <code>bool</code> <p>True/False strip prompt from returned output</p> <code>True</code> <code>failed_when_contains</code> <code>Optional[Union[str, List[str]]]</code> <p>string or list of strings indicating failure if found in response</p> <code>None</code> <code>timeout_ops</code> <code>Optional[float]</code> <p>timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>Scrapli Response object</p> Source code in <code>mikrotik/routeros/async_driver.py</code> <pre><code>async def send_command(\n    self,\n    command: str,\n    *,\n    strip_prompt: bool = True,\n    failed_when_contains: Optional[Union[str, List[str]]] = None,\n    timeout_ops: Optional[float] = None,\n) -&gt; Response:\n\"\"\"\n    mikrotik_routeros send_command method\n\n    Args:\n        command: string to send to device in privilege exec mode\n        strip_prompt: True/False strip prompt from returned output\n        failed_when_contains: string or list of strings indicating failure if found in response\n        timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for\n            the duration of the operation, value is reset to initial value after operation is\n            completed\n\n    Returns:\n        Response: Scrapli Response object\n\n    Raises:\n        N/A\n\n    \"\"\"\n\n    # RouterOS echoes the prompt/pattern twice after sending a command,\n    # modify the prompt pattern accordingly to catch both echoes.\n    #\n    # [user@HOSTNAME]&gt; /command\\r\\n[user@HOSTNAME]&gt; /command\\r\\nOUTPUT...\n    #\n    old_comms_prompt_pattern = self.comms_prompt_pattern\n    self.comms_prompt_pattern = f\"{old_comms_prompt_pattern}.*{old_comms_prompt_pattern}\"\n\n    response = await super().send_command(\n        command,\n        strip_prompt=strip_prompt,\n        failed_when_contains=failed_when_contains,\n        timeout_ops=timeout_ops,\n    )\n\n    # Change the prompt pattern back to the original one.\n    self.comms_prompt_pattern = old_comms_prompt_pattern\n\n    # Since the command is echoed twice, and scrapli only removes it once, we need to\n    # manually remove the second command echo by stripping the first line from the output.\n    if response.result.count(\"\\n\") &gt; 0 and command in response.result.split(\"\\n\")[0]:\n        response.result = \"\\n\".join(response.result.split(\"\\n\")[1:])\n\n    return response\n</code></pre>"},{"location":"reference/mikrotik/routeros/async_driver/#mikrotik.routeros.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncGenericDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async mikrotik_routeros default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncGenericDriver</code> <p>AsyncGenericDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>mikrotik/routeros/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncGenericDriver) -&gt; None:\n\"\"\"\n    Async mikrotik_routeros default on_close callable\n\n    Args:\n        conn: AsyncGenericDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.channel.write(channel_input=\"/quit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/mikrotik/routeros/mikrotik_routeros/","title":"Mikrotik routeros","text":"<p>scrapli_community.mikrotik.routeros.mikrotik_routeros</p>"},{"location":"reference/mikrotik/routeros/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.mikrotik.routeros.sync_driver</p>"},{"location":"reference/mikrotik/routeros/sync_driver/#mikrotik.routeros.sync_driver.MikrotikRouterOSDriver","title":"<code>MikrotikRouterOSDriver</code>","text":"<p>         Bases: <code>GenericDriver</code></p> Source code in <code>mikrotik/routeros/sync_driver.py</code> <pre><code>class MikrotikRouterOSDriver(GenericDriver):\n    def __init__(self, **kwargs: Any) -&gt; None:\n\"\"\"\n        Mikrotik RouterOS platform class\n\n        Args:\n            kwargs: keyword args\n\n        Returns:\n            N/A\n\n        Raises:\n            N/A\n\n        \"\"\"\n\n        # Append login options to the username according to\n        # https://wiki.mikrotik.com/wiki/Manual:Console_login_process\n        kwargs[\"auth_username\"] += \"+cet511w4098h\"\n\n        super().__init__(**kwargs)\n\n    def send_command(\n        self,\n        command: str,\n        *,\n        strip_prompt: bool = True,\n        failed_when_contains: Optional[Union[str, List[str]]] = None,\n        timeout_ops: Optional[float] = None,\n    ) -&gt; Response:\n\"\"\"\n        mikrotik_routeros send_command method\n\n        Args:\n            command: string to send to device in privilege exec mode\n            strip_prompt: True/False strip prompt from returned output\n            failed_when_contains: string or list of strings indicating failure if found in response\n            timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for\n                the duration of the operation, value is reset to initial value after operation is\n                completed\n\n        Returns:\n            Response: Scrapli Response object\n\n        Raises:\n            N/A\n\n        \"\"\"\n\n        # RouterOS echoes the prompt/pattern twice after sending a command,\n        # modify the prompt pattern accordingly to catch both echoes.\n        #\n        # [user@HOSTNAME]&gt; /command\\r\\n[user@HOSTNAME]&gt; /command\\r\\nOUTPUT...\n        #\n        old_comms_prompt_pattern = self.comms_prompt_pattern\n        self.comms_prompt_pattern = f\"{old_comms_prompt_pattern}.*{old_comms_prompt_pattern}\"\n\n        response = super().send_command(\n            command,\n            strip_prompt=strip_prompt,\n            failed_when_contains=failed_when_contains,\n            timeout_ops=timeout_ops,\n        )\n\n        # Change the prompt pattern back to the original one.\n        self.comms_prompt_pattern = old_comms_prompt_pattern\n\n        # Since the command is echoed twice, and scrapli only removes it once, we need to\n        # manually remove the second command echo by stripping the first line from the output.\n        if response.result.count(\"\\n\") &gt; 0 and command in response.result.split(\"\\n\")[0]:\n            response.result = \"\\n\".join(response.result.split(\"\\n\")[1:])\n\n        return response\n</code></pre>"},{"location":"reference/mikrotik/routeros/sync_driver/#mikrotik.routeros.sync_driver.MikrotikRouterOSDriver.__init__","title":"<code>__init__(**kwargs: Any) -&gt; None</code>","text":"<p>Mikrotik RouterOS platform class</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>keyword args</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>mikrotik/routeros/sync_driver.py</code> <pre><code>def __init__(self, **kwargs: Any) -&gt; None:\n\"\"\"\n    Mikrotik RouterOS platform class\n\n    Args:\n        kwargs: keyword args\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n\n    # Append login options to the username according to\n    # https://wiki.mikrotik.com/wiki/Manual:Console_login_process\n    kwargs[\"auth_username\"] += \"+cet511w4098h\"\n\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/mikrotik/routeros/sync_driver/#mikrotik.routeros.sync_driver.MikrotikRouterOSDriver.send_command","title":"<code>send_command(command: str, *, strip_prompt: bool = True, failed_when_contains: Optional[Union[str, List[str]]] = None, timeout_ops: Optional[float] = None) -&gt; Response</code>","text":"<p>mikrotik_routeros send_command method</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>string to send to device in privilege exec mode</p> required <code>strip_prompt</code> <code>bool</code> <p>True/False strip prompt from returned output</p> <code>True</code> <code>failed_when_contains</code> <code>Optional[Union[str, List[str]]]</code> <p>string or list of strings indicating failure if found in response</p> <code>None</code> <code>timeout_ops</code> <code>Optional[float]</code> <p>timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>Scrapli Response object</p> Source code in <code>mikrotik/routeros/sync_driver.py</code> <pre><code>def send_command(\n    self,\n    command: str,\n    *,\n    strip_prompt: bool = True,\n    failed_when_contains: Optional[Union[str, List[str]]] = None,\n    timeout_ops: Optional[float] = None,\n) -&gt; Response:\n\"\"\"\n    mikrotik_routeros send_command method\n\n    Args:\n        command: string to send to device in privilege exec mode\n        strip_prompt: True/False strip prompt from returned output\n        failed_when_contains: string or list of strings indicating failure if found in response\n        timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for\n            the duration of the operation, value is reset to initial value after operation is\n            completed\n\n    Returns:\n        Response: Scrapli Response object\n\n    Raises:\n        N/A\n\n    \"\"\"\n\n    # RouterOS echoes the prompt/pattern twice after sending a command,\n    # modify the prompt pattern accordingly to catch both echoes.\n    #\n    # [user@HOSTNAME]&gt; /command\\r\\n[user@HOSTNAME]&gt; /command\\r\\nOUTPUT...\n    #\n    old_comms_prompt_pattern = self.comms_prompt_pattern\n    self.comms_prompt_pattern = f\"{old_comms_prompt_pattern}.*{old_comms_prompt_pattern}\"\n\n    response = super().send_command(\n        command,\n        strip_prompt=strip_prompt,\n        failed_when_contains=failed_when_contains,\n        timeout_ops=timeout_ops,\n    )\n\n    # Change the prompt pattern back to the original one.\n    self.comms_prompt_pattern = old_comms_prompt_pattern\n\n    # Since the command is echoed twice, and scrapli only removes it once, we need to\n    # manually remove the second command echo by stripping the first line from the output.\n    if response.result.count(\"\\n\") &gt; 0 and command in response.result.split(\"\\n\")[0]:\n        response.result = \"\\n\".join(response.result.split(\"\\n\")[1:])\n\n    return response\n</code></pre>"},{"location":"reference/mikrotik/routeros/sync_driver/#mikrotik.routeros.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: GenericDriver) -&gt; None</code>","text":"<p>mikrotik_routeros default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>GenericDriver</code> <p>GenericDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>mikrotik/routeros/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: GenericDriver) -&gt; None:\n\"\"\"\n    mikrotik_routeros default on_close callable\n\n    Args:\n        conn: GenericDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.channel.write(channel_input=\"/quit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/nokia/","title":"Index","text":"<p>scrapli_community.nokia</p>"},{"location":"reference/nokia/srlinux/","title":"Index","text":"<p>scrapli_community.nokia.srlinux</p>"},{"location":"reference/nokia/srlinux/async_driver/","title":"Async driver","text":"<p>scrapli_community.nokia.nokia_srlinux.async_driver</p>"},{"location":"reference/nokia/srlinux/async_driver/#nokia.srlinux.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>nokia_srlinux default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nokia/srlinux/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    nokia_srlinux default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"logout\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/nokia/srlinux/async_driver/#nokia.srlinux.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>nokia_srlinux on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nokia/srlinux/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    nokia_srlinux on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"environment cli-engine type basic\")\n    await conn.send_command(command=\"environment complete-on-space false\")\n</code></pre>"},{"location":"reference/nokia/srlinux/nokia_srlinux/","title":"Nokia srlinux","text":"<p>scrapli_community.nokia.srlinux.nokia_srlinux</p>"},{"location":"reference/nokia/srlinux/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.nokia.nokia_srlinux.sync_driver</p>"},{"location":"reference/nokia/srlinux/sync_driver/#nokia.srlinux.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>nokia_srlinux default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nokia/srlinux/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    nokia_srlinux default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"logout\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/nokia/srlinux/sync_driver/#nokia.srlinux.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>nokia_srlinux on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nokia/srlinux/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    nokia_srlinux on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"environment cli-engine type basic\")\n    conn.send_command(command=\"environment complete-on-space false\")\n</code></pre>"},{"location":"reference/nokia/sros/","title":"Index","text":"<p>scrapli_community.nokia.sros</p>"},{"location":"reference/nokia/sros/async_driver/","title":"Async driver","text":"<p>scrapli_community.nokia.sros.async_driver</p>"},{"location":"reference/nokia/sros/async_driver/#nokia.sros.async_driver.classic_default_async_on_open","title":"<code>classic_default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>nokia_sros classic on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nokia/sros/async_driver.py</code> <pre><code>async def classic_default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    nokia_sros classic on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"environment no more\")\n</code></pre>"},{"location":"reference/nokia/sros/async_driver/#nokia.sros.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>nokia_sros default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nokia/sros/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    nokia_sros default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"logout\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/nokia/sros/async_driver/#nokia.sros.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>nokia_sros on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nokia/sros/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    nokia_sros on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"environment command-completion space false\")\n    await conn.send_command(command=\"environment console width 512\")\n    await conn.send_command(command=\"environment more false\")\n    await conn.send_command(command=\"//environment no more\")\n</code></pre>"},{"location":"reference/nokia/sros/nokia_sros/","title":"Nokia sros","text":"<p>scrapli_community.nokia.sros.nokia_sros</p>"},{"location":"reference/nokia/sros/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.nokia.sros.sync_driver</p>"},{"location":"reference/nokia/sros/sync_driver/#nokia.sros.sync_driver.classic_default_sync_on_open","title":"<code>classic_default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>nokia_sros classic mode on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nokia/sros/sync_driver.py</code> <pre><code>def classic_default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    nokia_sros classic mode on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"environment no more\")\n</code></pre>"},{"location":"reference/nokia/sros/sync_driver/#nokia.sros.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>nokia_sros default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nokia/sros/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    nokia_sros default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"logout\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/nokia/sros/sync_driver/#nokia.sros.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>nokia_sros on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>nokia/sros/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    nokia_sros on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        None\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"environment command-completion space false\")\n    conn.send_command(command=\"environment console width 512\")\n    conn.send_command(command=\"environment more false\")\n    conn.send_command(command=\"//environment no more\")\n</code></pre>"},{"location":"reference/paloalto/","title":"Index","text":"<p>scrapli_community.paloalto</p>"},{"location":"reference/paloalto/panos/","title":"Index","text":"<p>scrapli_community.paloalto.panos</p>"},{"location":"reference/paloalto/panos/async_driver/","title":"Async driver","text":"<p>scrapli_community.paloalto.panos.async_driver</p>"},{"location":"reference/paloalto/panos/async_driver/#paloalto.panos.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async palalto_panos default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>paloalto/panos/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async palalto_panos default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/paloalto/panos/async_driver/#paloalto.panos.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async paloalto_panos default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>paloalto/panos/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async paloalto_panos default on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"set cli scripting-mode on\")\n    await conn.send_command(command=\"set cli pager off\")\n</code></pre>"},{"location":"reference/paloalto/panos/paloalto_panos/","title":"Paloalto panos","text":"<p>scrapli_community.paloalto.panos.paloalto_panos</p>"},{"location":"reference/paloalto/panos/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.paloalto.panos.sync_driver</p>"},{"location":"reference/paloalto/panos/sync_driver/#paloalto.panos.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>paloalto_panos default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>paloalto/panos/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    paloalto_panos default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/paloalto/panos/sync_driver/#paloalto.panos.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>Async paloalto_panos default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>paloalto/panos/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    Async paloalto_panos default on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"set cli scripting-mode on\")\n    conn.send_command(command=\"set cli pager off\")\n</code></pre>"},{"location":"reference/raisecom/","title":"Index","text":"<p>scrapli_community.raisecom</p>"},{"location":"reference/raisecom/ros/","title":"Index","text":"<p>scrapli_community.raisecom.ros</p>"},{"location":"reference/raisecom/ros/async_driver/","title":"Async driver","text":"<p>scrapli_community.raisecom.ros.ansync_driver</p>"},{"location":"reference/raisecom/ros/async_driver/#raisecom.ros.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async scrapli_example default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>raisecom/ros/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async scrapli_example default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    # write exit directly to the transport as channel would fail to find the prompt after sending\n    # the exit command!\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/raisecom/ros/async_driver/#raisecom.ros.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async scrapli_example default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>raisecom/ros/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async scrapli_example default on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"terminal page-break disable\")\n</code></pre>"},{"location":"reference/raisecom/ros/raisecom_ros/","title":"Raisecom ros","text":"<p>scrapli_community.raisecom.ros.raisecom_ros</p>"},{"location":"reference/raisecom/ros/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.raisecom.ros.sync_driver</p>"},{"location":"reference/raisecom/ros/sync_driver/#raisecom.ros.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>raisecom_ros on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>raisecom/ros/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    raisecom_ros on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    # write exit directly to the transport as channel would fail to find the prompt after sending\n    # the exit command!\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/raisecom/ros/sync_driver/#raisecom.ros.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>raisecom_ros on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>raisecom/ros/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    raisecom_ros on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"terminal page-break disable\")\n</code></pre>"},{"location":"reference/ruckus/","title":"Index","text":"<p>scrapli_community.ruckus</p>"},{"location":"reference/ruckus/fastiron/","title":"Index","text":"<p>scrapli_community.ruckus.fastiron</p>"},{"location":"reference/ruckus/fastiron/async_driver/","title":"Async driver","text":"<p>scrapli_community.ruckus.fastiron.ansync_driver</p>"},{"location":"reference/ruckus/fastiron/async_driver/#ruckus.fastiron.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async ruckus_fastiron default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>ruckus/fastiron/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async ruckus_fastiron default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    # write exit directly to the transport as channel would fail to find the prompt after sending\n    # the exit command!\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/ruckus/fastiron/async_driver/#ruckus.fastiron.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async ruckus_fastiron default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>ruckus/fastiron/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async ruckus_fastiron default on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"skip-page-display\")\n</code></pre>"},{"location":"reference/ruckus/fastiron/ruckus_fastiron/","title":"Ruckus fastiron","text":"<p>scrapli_community.ruckus.fastiron.ruckus_fastiron</p>"},{"location":"reference/ruckus/fastiron/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.ruckus.fastiron.sync_driver</p>"},{"location":"reference/ruckus/fastiron/sync_driver/#ruckus.fastiron.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>ruckus_fastiron default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>ruckus/fastiron/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    ruckus_fastiron default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    # write exit directly to the transport as channel would fail to find the prompt after sending\n    # the exit command!\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/ruckus/fastiron/sync_driver/#ruckus.fastiron.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>ruckus_fastiron default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>ruckus/fastiron/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    ruckus_fastiron default on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"skip-page-display\")\n</code></pre>"},{"location":"reference/ruckus/unleashed/","title":"Index","text":"<p>scrapli_community.ruckus.unleashed</p>"},{"location":"reference/ruckus/unleashed/async_driver/","title":"Async driver","text":"<p>scrapli_community.ruckus.unleashed.async_driver</p>"},{"location":"reference/ruckus/unleashed/async_driver/#ruckus.unleashed.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async ruckus_unleashed default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>ruckus/unleashed/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async ruckus_unleashed default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/ruckus/unleashed/async_driver/#ruckus.unleashed.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async ruckus_unleashed default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>ruckus/unleashed/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async ruckus_unleashed default on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    # Since Ruckus Unleashed devices do not use true SSH authentication, after the initial\n    # connection is established, authentication is handled using Scrapli's built-in telnet\n    # authentication:\n    # https://github.com/carlmontanari/scrapli/blob/main/scrapli/channel/async_channel.py#L331\n    # Auth Bypass Reference:\n    # https://carlmontanari.github.io/scrapli/user_guide/advanced_usage/#auth-bypass\n    await conn.channel.channel_authenticate_telnet(\n        auth_username=conn.auth_username, auth_password=conn.auth_password\n    )\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n</code></pre>"},{"location":"reference/ruckus/unleashed/ruckus_unleashed/","title":"Ruckus unleashed","text":"<p>scrapli_community.ruckus.unleashed.ruckus_unleashed</p>"},{"location":"reference/ruckus/unleashed/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.ruckus.unleashed.sync_driver</p>"},{"location":"reference/ruckus/unleashed/sync_driver/#ruckus.unleashed.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>ruckus_unleashed default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>ruckus/unleashed/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    ruckus_unleashed default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/ruckus/unleashed/sync_driver/#ruckus.unleashed.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>ruckus_unleashed default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>ruckus/unleashed/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    ruckus_unleashed default on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    # Since Ruckus Unleashed devices do not use true SSH authentication, after the initial\n    # connection is established, authentication is handled using Scrapli's built-in telnet\n    # authentication:\n    # https://github.com/carlmontanari/scrapli/blob/main/scrapli/channel/sync_channel.py#L327\n    # Auth Bypass Reference:\n    # https://carlmontanari.github.io/scrapli/user_guide/advanced_usage/#auth-bypass\n    conn.channel.channel_authenticate_telnet(\n        auth_username=conn.auth_username, auth_password=conn.auth_password\n    )\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n</code></pre>"},{"location":"reference/scrapli/","title":"Index","text":"<p>scrapli_community.scrapli</p>"},{"location":"reference/scrapli/genericdriver/","title":"Index","text":"<p>scrapli_community.scrapli.genericdriver</p>"},{"location":"reference/scrapli/genericdriver/async_driver/","title":"Async driver","text":"<p>scrapli_community.scrapli.genericdriver.ansync_driver</p>"},{"location":"reference/scrapli/genericdriver/async_driver/#scrapli.genericdriver.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncGenericDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async scrapli_genericdriver default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncGenericDriver</code> <p>AsyncGenericDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>scrapli/genericdriver/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncGenericDriver) -&gt; None:\n\"\"\"\n    Async scrapli_genericdriver default on_close callable\n\n    Args:\n        conn: AsyncGenericDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.channel.write(channel_input=\"logout\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/scrapli/genericdriver/async_driver/#scrapli.genericdriver.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncGenericDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async scrapli_genericdriver default on_open callable</p> <p>This is tested with a cisco wlc using auth_bypass so we have to send creds during on open</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncGenericDriver</code> <p>AsyncGenericDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>scrapli/genericdriver/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncGenericDriver) -&gt; None:\n\"\"\"\n    Async scrapli_genericdriver default on_open callable\n\n    This is tested with a cisco wlc using auth_bypass so we have to send creds during on open\n\n    Args:\n        conn: AsyncGenericDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    await asyncio.sleep(0.25)\n    conn.channel.write(channel_input=conn.transport.auth_username)\n    conn.channel.send_return()\n    await asyncio.sleep(0.25)\n    conn.channel.write(channel_input=conn.transport.auth_password)\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/scrapli/genericdriver/scrapli_genericdriver/","title":"Scrapli genericdriver","text":"<p>scrapli_community.scrapli.genericdriver.scrapli_example</p>"},{"location":"reference/scrapli/genericdriver/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.scrapli.genericdriver.sync_driver</p>"},{"location":"reference/scrapli/genericdriver/sync_driver/#scrapli.genericdriver.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: GenericDriver) -&gt; None</code>","text":"<p>scrapli_genericdriver default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>GenericDriver</code> <p>GenericDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>scrapli/genericdriver/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: GenericDriver) -&gt; None:\n\"\"\"\n    scrapli_genericdriver default on_close callable\n\n    Args:\n        conn: GenericDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.channel.write(channel_input=\"logout\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/scrapli/genericdriver/sync_driver/#scrapli.genericdriver.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: GenericDriver) -&gt; None</code>","text":"<p>scrapli_genericdriver default on_open callable</p> <p>This is tested with a cisco wlc using auth_bypass so we have to send creds during on open</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>GenericDriver</code> <p>GenericDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>scrapli/genericdriver/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: GenericDriver) -&gt; None:\n\"\"\"\n    scrapli_genericdriver default on_open callable\n\n    This is tested with a cisco wlc using auth_bypass so we have to send creds during on open\n\n    Args:\n        conn: GenericDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    time.sleep(0.25)\n    conn.channel.write(channel_input=conn.transport.auth_username)\n    conn.channel.send_return()\n    time.sleep(0.25)\n    conn.channel.write(channel_input=conn.transport.auth_password)\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/scrapli/networkdriver/","title":"Index","text":"<p>scrapli_community.scrapli.networkdriver</p>"},{"location":"reference/scrapli/networkdriver/async_driver/","title":"Async driver","text":"<p>scrapli_community.scrapli.networkdriver.ansync_driver</p>"},{"location":"reference/scrapli/networkdriver/async_driver/#scrapli.networkdriver.async_driver.AsyncScrapliNetworkDriverWithMethods","title":"<code>AsyncScrapliNetworkDriverWithMethods</code>","text":"<p>         Bases: <code>AsyncNetworkDriver</code></p> Source code in <code>scrapli/networkdriver/async_driver.py</code> <pre><code>class AsyncScrapliNetworkDriverWithMethods(AsyncNetworkDriver):\n    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n\"\"\"\n        Example scrapli community platform class\n\n        Args:\n            args: positional args\n            kwargs: keyword args\n\n        Returns:\n            N/A\n\n        Raises:\n            N/A\n\n        \"\"\"\n        super().__init__(*args, **kwargs)\n\n    async def example_method(self) -&gt; None:\n\"\"\"\n        Example scrapli community method\n\n        Args:\n            N/A\n\n        Returns:\n            N/A\n\n        Raises:\n            N/A\n\n        \"\"\"\n        self.channel.send_return()\n        result = await self.channel.read()\n        print(result)\n</code></pre>"},{"location":"reference/scrapli/networkdriver/async_driver/#scrapli.networkdriver.async_driver.AsyncScrapliNetworkDriverWithMethods.__init__","title":"<code>__init__(*args: Any, **kwargs: Any) -&gt; None</code>","text":"<p>Example scrapli community platform class</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <p>positional args</p> required <code>kwargs</code> <p>keyword args</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>scrapli/networkdriver/async_driver.py</code> <pre><code>def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n\"\"\"\n    Example scrapli community platform class\n\n    Args:\n        args: positional args\n        kwargs: keyword args\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/scrapli/networkdriver/async_driver/#scrapli.networkdriver.async_driver.AsyncScrapliNetworkDriverWithMethods.example_method","title":"<code>example_method() -&gt; None</code>  <code>async</code>","text":"<p>Example scrapli community method</p> <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>scrapli/networkdriver/async_driver.py</code> <pre><code>async def example_method(self) -&gt; None:\n\"\"\"\n    Example scrapli community method\n\n    Args:\n        N/A\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    self.channel.send_return()\n    result = await self.channel.read()\n    print(result)\n</code></pre>"},{"location":"reference/scrapli/networkdriver/async_driver/#scrapli.networkdriver.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async scrapli_example default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>scrapli/networkdriver/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async scrapli_example default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    # write exit directly to the transport as channel would fail to find the prompt after sending\n    # the exit command!\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/scrapli/networkdriver/async_driver/#scrapli.networkdriver.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async scrapli_example default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>scrapli/networkdriver/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async scrapli_example default on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"terminal length 0\")\n    await conn.send_command(command=\"terminal width 512\")\n</code></pre>"},{"location":"reference/scrapli/networkdriver/scrapli_networkdriver/","title":"Scrapli networkdriver","text":"<p>scrapli_community.scrapli.networkdriver.scrapli_example</p>"},{"location":"reference/scrapli/networkdriver/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.scrapli.networkdriver.sync_driver</p>"},{"location":"reference/scrapli/networkdriver/sync_driver/#scrapli.networkdriver.sync_driver.ScrapliNetworkDriverWithMethods","title":"<code>ScrapliNetworkDriverWithMethods</code>","text":"<p>         Bases: <code>NetworkDriver</code></p> Source code in <code>scrapli/networkdriver/sync_driver.py</code> <pre><code>class ScrapliNetworkDriverWithMethods(NetworkDriver):\n    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n\"\"\"\n        Example scrapli community platform class\n\n        Args:\n            args: positional args\n            kwargs: keyword args\n\n        Returns:\n            N/A\n\n        Raises:\n            N/A\n\n        \"\"\"\n        super().__init__(*args, **kwargs)\n\n    def example_method(self) -&gt; None:\n\"\"\"\n        Example scrapli community method\n\n        Args:\n            N/A\n\n        Returns:\n            N/A\n\n        Raises:\n            N/A\n\n        \"\"\"\n        self.channel.send_return()\n        print(self.channel.read())\n</code></pre>"},{"location":"reference/scrapli/networkdriver/sync_driver/#scrapli.networkdriver.sync_driver.ScrapliNetworkDriverWithMethods.__init__","title":"<code>__init__(*args: Any, **kwargs: Any) -&gt; None</code>","text":"<p>Example scrapli community platform class</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <p>positional args</p> required <code>kwargs</code> <p>keyword args</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>scrapli/networkdriver/sync_driver.py</code> <pre><code>def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n\"\"\"\n    Example scrapli community platform class\n\n    Args:\n        args: positional args\n        kwargs: keyword args\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/scrapli/networkdriver/sync_driver/#scrapli.networkdriver.sync_driver.ScrapliNetworkDriverWithMethods.example_method","title":"<code>example_method() -&gt; None</code>","text":"<p>Example scrapli community method</p> <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>scrapli/networkdriver/sync_driver.py</code> <pre><code>def example_method(self) -&gt; None:\n\"\"\"\n    Example scrapli community method\n\n    Args:\n        N/A\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    self.channel.send_return()\n    print(self.channel.read())\n</code></pre>"},{"location":"reference/scrapli/networkdriver/sync_driver/#scrapli.networkdriver.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>scrapli_example default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>scrapli/networkdriver/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    scrapli_example default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    # write exit directly to the transport as channel would fail to find the prompt after sending\n    # the exit command!\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/scrapli/networkdriver/sync_driver/#scrapli.networkdriver.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>scrapli_example default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>scrapli/networkdriver/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    scrapli_example default on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"terminal length 0\")\n    conn.send_command(command=\"terminal width 512\")\n</code></pre>"},{"location":"reference/siemens/","title":"Index","text":"<p>scrapli_community.siemens</p>"},{"location":"reference/siemens/roxii/","title":"Index","text":"<p>scrapli_community.siemens.roxii</p>"},{"location":"reference/siemens/roxii/async_driver/","title":"Async driver","text":"<p>scrapli_community.siemens.roxii.async_driver</p>"},{"location":"reference/siemens/roxii/async_driver/#siemens.roxii.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async siemens_roxii default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>siemens/roxii/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async siemens_roxii default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.channel.write(channel_input=\"q\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/siemens/roxii/async_driver/#siemens.roxii.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async siemens_roxii default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>siemens/roxii/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async siemens_roxii default on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n</code></pre>"},{"location":"reference/siemens/roxii/siemens_roxii/","title":"Siemens roxii","text":"<p>scrapli_community.siemens.roxii.siemens_roxii</p>"},{"location":"reference/siemens/roxii/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.siemens.roxii.sync_driver</p>"},{"location":"reference/siemens/roxii/sync_driver/#siemens.roxii.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>siemens_roxii default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>siemens/roxii/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    siemens_roxii default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.channel.write(channel_input=\"q\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/siemens/roxii/sync_driver/#siemens.roxii.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>siemens_roxii on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>siemens/roxii/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    siemens_roxii on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n</code></pre>"},{"location":"reference/versa/","title":"Index","text":"<p>scrapli_community.versa</p>"},{"location":"reference/versa/flexvnf/","title":"Index","text":"<p>scrapli_community.versa.flexvnf</p>"},{"location":"reference/versa/flexvnf/async_driver/","title":"Async driver","text":"<p>scrapli_community.versa.flexvnf.ansync_driver</p>"},{"location":"reference/versa/flexvnf/async_driver/#versa.flexvnf.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async versa_flexvnf default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>versa/flexvnf/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async versa_flexvnf default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    # write exit directly to the transport as channel would fail to find the prompt after sending\n    # the exit command!\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.write(channel_input=\"logout\")\n</code></pre>"},{"location":"reference/versa/flexvnf/async_driver/#versa.flexvnf.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async versa_flexvnf default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>versa/flexvnf/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async versa_flexvnf default on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    await conn.send_command(command=\"set complete-on-space false\")\n    await conn.send_command(command=\"set paginate false\")\n    await conn.send_command(command=\"set screen width 512\")\n</code></pre>"},{"location":"reference/versa/flexvnf/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.versa.flexvnf.sync_driver</p>"},{"location":"reference/versa/flexvnf/sync_driver/#versa.flexvnf.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>versa_fastiron default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>versa/flexvnf/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    versa_fastiron default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    # write exit directly to the transport as channel would fail to find the prompt after sending\n    # the exit command!\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.write(channel_input=\"logout\")\n</code></pre>"},{"location":"reference/versa/flexvnf/sync_driver/#versa.flexvnf.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>versa_fastiron default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>versa/flexvnf/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    versa_fastiron default on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n    conn.send_command(command=\"set complete-on-space false\")\n    conn.send_command(command=\"set paginate false\")\n    conn.send_command(command=\"set screen width 512\")\n</code></pre>"},{"location":"reference/versa/flexvnf/versa_flexvnf/","title":"Versa flexvnf","text":"<p>scrapli_community.versa.flexvnf.versa_flexvnf</p>"},{"location":"reference/vyos/","title":"Index","text":"<p>scrapli_community.vyos</p>"},{"location":"reference/vyos/vyos/","title":"Index","text":"<p>scrapli_community.vyos.vyos</p>"},{"location":"reference/vyos/vyos/async_driver/","title":"Async driver","text":"<p>scrapli_community.vyos.vyos.async_driver</p>"},{"location":"reference/vyos/vyos/async_driver/#vyos.vyos.async_driver.default_async_on_close","title":"<code>default_async_on_close(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async vyos default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>vyos/vyos/async_driver.py</code> <pre><code>async def default_async_on_close(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async vyos default on_close callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/vyos/vyos/async_driver/#vyos.vyos.async_driver.default_async_on_open","title":"<code>default_async_on_open(conn: AsyncNetworkDriver) -&gt; None</code>  <code>async</code>","text":"<p>Async vyos default on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>AsyncNetworkDriver</code> <p>AsyncNetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>vyos/vyos/async_driver.py</code> <pre><code>async def default_async_on_open(conn: AsyncNetworkDriver) -&gt; None:\n\"\"\"\n    Async vyos default on_open callable\n\n    Args:\n        conn: AsyncNetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    await conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n\n    await conn.send_command(command=\"stty cols 100000\")\n</code></pre>"},{"location":"reference/vyos/vyos/sync_driver/","title":"Sync driver","text":"<p>scrapli_community.vyos.vyos.sync_driver</p>"},{"location":"reference/vyos/vyos/sync_driver/#vyos.vyos.sync_driver.default_sync_on_close","title":"<code>default_sync_on_close(conn: NetworkDriver) -&gt; None</code>","text":"<p>vyos default on_close callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>vyos/vyos/sync_driver.py</code> <pre><code>def default_sync_on_close(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    vyos default on_close callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n\n    conn.channel.write(channel_input=\"exit\")\n    conn.channel.send_return()\n</code></pre>"},{"location":"reference/vyos/vyos/sync_driver/#vyos.vyos.sync_driver.default_sync_on_open","title":"<code>default_sync_on_open(conn: NetworkDriver) -&gt; None</code>","text":"<p>vyos on_open callable</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>NetworkDriver</code> <p>NetworkDriver object</p> required <p>Returns:</p> Type Description <code>None</code> <p>N/A</p> Source code in <code>vyos/vyos/sync_driver.py</code> <pre><code>def default_sync_on_open(conn: NetworkDriver) -&gt; None:\n\"\"\"\n    vyos on_open callable\n\n    Args:\n        conn: NetworkDriver object\n\n    Returns:\n        N/A\n\n    Raises:\n        N/A\n\n    \"\"\"\n    conn.acquire_priv(desired_priv=conn.default_desired_privilege_level)\n\n    conn.send_command(command=\"stty cols 100000\")\n</code></pre>"},{"location":"reference/vyos/vyos/vyos/","title":"Vyos","text":"<p>scrapli_community.vyos.vyos.vyos</p>"},{"location":"user_guide/basic_usage/","title":"Basic Usage","text":""},{"location":"user_guide/basic_usage/#adding-a-platform","title":"Adding a Platform","text":"<p>Adding a platform to be supported by scrapli is a fairly straight forward process! Before getting started there are a  few things to understand about scrapli:</p> <ol> <li>scrapli is fairly low level -- this means that the assumption is that the user will deal with most* platform     specific things such as saving configurations, copying files, and things like that.</li> <li>scrapli assumes that the ssh channel/session will behave \"normally\" -- as in look and feel like a typical network  operating system ssh session (just like all the \"core\" platforms behave).</li> </ol> <p>* scrapli does however handle privilege levels/escalation/deescalation</p> <p>Before jumping into how to build a platform, it is best to start off with rehashing what exactly a platform is! A  platform is simply a collection of arguments/callables (functions) defined in a dictionary. This <code>SCRAPLI_PLATFORM</code>  dictionary is loaded up by the scrapli factory classes (<code>Scrapli</code> and <code>AsyncScrapli</code>) and used to instantiate an   object built on the <code>GenericDriver</code> or <code>NetworkDriver</code> classes in scrapli.</p> <p>The reasoning behind platforms not being simply classes that inherit from the <code>GenericDriver</code> or <code>NetworkDriver</code> as  the current \"core\" platforms do, is to keep scrapli core as loosely coupled to the platforms as is possible  /practical -- this is hugely important to help ensure that scrapli core has as little \"cruft\" as possible, and stays   well tested/documented/etc., while still allowing users to adapt scrapli to work with various platforms easily.</p> <p>A <code>SCRAPLI_PLATFORM</code> dictionary (the dictionary defining the platform) is made up of only three main top level keys:</p> <ol> <li><code>driver_type</code> -- simply <code>generic</code> or <code>network</code>, no other options are allowed</li> <li><code>defaults</code> -- a dictionary containing all required arguments to create a connection object</li> <li><code>variants</code> -- a dictionary of dictionaries containing any types of variations to the \"defaults\" section -- this  allows users to have different \"profiles\" for a specific device type; for example there may be a variant that has a   different \"on_open\" callable that disables paging differently for newer versions of a platform or something like that</li> </ol> <p>Before jumping into details about what these all mean/do, here is an example platform dictionary:</p> <pre><code>SCRAPLI_PLATFORM = {\n    \"driver_type\": \"network\",\n    \"defaults\": {\n        \"privilege_levels\": DEFAULT_PRIVILEGE_LEVELS,\n        \"default_desired_privilege_level\": \"privilege_exec\",\n        \"sync_on_open\": default_sync_on_open,\n        \"async_on_open\": default_async_on_open,\n        \"sync_on_close\": default_sync_on_close,\n        \"async_on_close\": default_async_on_close,\n        \"failed_when_contains\": [\n            \"% Ambiguous command\",\n            \"% Incomplete command\",\n            \"% Invalid input detected\",\n            \"% Unknown command\",\n        ],\n        \"textfsm_platform\": \"cisco_iosxe\",\n        \"genie_platform\": \"iosxe\",\n    },\n    \"variants\": {\n        # not useful, just an example\n        \"test_variant1\": {\"default_desired_privilege_level\": \"configuration\"}\n    },\n}\n</code></pre> <p>The following sections will outline each of these values and what they mean/how they are used.</p>"},{"location":"user_guide/basic_usage/#driver-type","title":"Driver Type","text":"<p>As mentioned above, there are only two primary values for the <code>driver_type</code> argument, this can be either \"generic\"  or \"network\" and indicates which base driver class to use in scrapli core. If your device platform has the concept  of different privilege levels then you should select \"network\", otherwise \"generic\". Most network specific platforms   will likely be built with the \"network\" option selected (probably).</p> <p>You can also create your own class (inheriting from either the <code>NetworkDriver</code> or <code>GenericDriver</code> or their asyncio  counterparts) if you wish to be able to override any methods of those classes or to implement your own methods.</p> <p>Note that depending on the type selected for <code>driver_type</code> there will be slightly different required arguments  -- please see the example/test generic and network drivers in the scrapli vendor directory  directory. Note that the docs here in the README will focus on the \"network\" type as that is likely going to be more   common and is slightly more involved.</p>"},{"location":"user_guide/basic_usage/#defaults","title":"Defaults","text":"<p>The \"defaults\" section contains all of the most \"normal\" or common arguments/settings for a given platform. All  scrapli <code>NetworkDriver</code> or <code>GenericDriver</code> (depending on the platform you selected) arguments are valid here. Here   are the most commonly needed arguments, see the scrapli core docs for all available options.</p> Argument Type Required Purpose privilege_levels Dict [str: PrivilegeLevel] True dictionary defining device priv levels default_desired_privilege_level str True string of desired default priv level sync_on_open Callable False callable to run \"on open\" async_on_open Callable False asyncio callable to run \"on open\" sync_on_close Callable False callable to run \"on close\" async_on_close Callable False asyncio callable to run \"on close\" failed_when_contains List [str] False list of strings indicating command failure textfsm_platform str False platform name for textfms/ntc parser genie_platform str False platform name for genie parser <p>Any arguments provided here in the \"defaults\" section are simply passed to the <code>NetworkDriver</code> or <code>GenericDriver</code>. The reason this section is called \"defaults\" is that the arguments set here should apply to the broadest number of  devices of a given platform. That said, it is of course possible that there are sometimes variations within even a   single platform type (i.e. Cisco IOSXE) that may cause some of the default arguments to fail. That is where    variants come in! </p>"},{"location":"user_guide/basic_usage/#variants","title":"Variants","text":"<p>The \"variants\" section is nearly identical to the \"defaults\" section in that it provides arguments that will be  passed to the underlying scrapli driver. There are two big differences for this section though; firstly, there is   one extra level of nesting here -- \"variants\" is a dict of dicts with the top level keys of those dicts being the    name of the variant, and the values of that dict being the actual values for the driver arguments. Here is an     example:</p> <pre><code>    \"variants\": {\n        \"test_variant1\": {\n            \"comms_prompt_pattern\": r\"^\\(BLAH\\) &gt;$\"\n        }\n    },\n</code></pre> <p>The next thing you may notice is that there are many fewer arguments here! The reason being is that the \"variants \" are merged with the arguments in the \"defaults\" section. The idea here is that there may be some vendor \"Acme\" that  has an operating system called \"Tacocat\", but that os \"Tacocat\" has a few different options for login prompts for   example. In most cases the \"Acme Tacocat\" operating system has a \"normal\" login process that just prompts for    authentication and then lets you onto the router as per usual, but there may be a \"variant\"(!) that has a banner     or some kind of prompt that the user must enter \"OK\" or \"I ACCEPT\" or something like that before being able to      log on. This is what the \"variant\" is designed to handle -- nothing needs to change for this variant to work       other than passing a new <code>on_open</code> method that is designed to deal with this different logon prompt.</p>"},{"location":"user_guide/basic_usage/#privilege-levels","title":"Privilege Levels","text":"<p>Privilege levels are critically important for any platform using the <code>network</code> driver_type -- this dictionary of  <code>PrivilegeLevel</code> objects tells scrapli about the different \"modes\"/privilege levels of the platform, and how to get   into and out of each of them. Below is an example taken from the <code>scrapli_networkdriver</code> example/test platform:</p> <pre><code>    \"configuration\": (\n        PrivilegeLevel(\n            pattern=r\"^[a-z0-9.\\-_@/:]{1,63}\\(conf[a-z0-9.\\-@/:\\+]{0,32}\\)#$\",\n            name=\"configuration\",\n            previous_priv=\"privilege_exec\",\n            deescalate=\"end\",\n            escalate=\"configure terminal\",\n            escalate_auth=False,\n            escalate_prompt=\"\",\n        )\n    ),\n</code></pre> <p>The key of the dictionary is \"configuration\" (the name of the privilege level), and the value is a <code>PrivilegeLevel</code> object. You can read more about privilege levels in the scrapli docs here.</p> <p>The main takeaway is that it is vitally important to get the privilege levels correct, so take care to ensure these  are very accurate -- especially the <code>pattern</code> argument -- it is very easy to miss a character/symbol that is valid   for a prompt pattern, and this will cause scrapli to fail!</p>"},{"location":"user_guide/basic_usage/#sync-and-asyncio","title":"Sync and Asyncio","text":"<p>Regardless of your requirements of sync vs asyncio, all community platforms must include both synchronous and aysncio  support or they will not be merged. Even if you have never done anything with asyncio, this is a pretty small and   straight forward requirement to satisfy. At the moment the only place that requires any special attention to sync    and asyncio differences is for the \"on open\" and \"on close\" callables, please see the following section for details.</p>"},{"location":"user_guide/basic_usage/#open-and-close-callables","title":"Open and Close Callables","text":"<p>Scrapli provides the option for users to pass in their own callables to be executed after authentication and prior to  closing the connection, you can read more about these in the scrapli docs here.</p> <p>In order to create a new scrapli-community platform, you almost certainly will need to provide these callables -- and  if they are required are required in both sync and asyncio form. In general the on open callable needs to acquire   the default desired privilege level (ex: \"privilege exec\" in IOSXE terms) and disable any kind of width/height    settings on the terminal (disable pagination). Some other platforms may have differing requirements here such as     handling login prompts/banners, performing additional authentication, or disabling other terminal behavior such      as \"complete on space\" in Junos. </p> <p>The on close callable is much less important, but is nice to have to ensure that connections are \"cleanly\" closed  -- this callable should generally handle the graceful exit/logout only.</p> <p>If you have never written asyncio code and are interested in submitting a platform, please see the example platform  code, the asycnio needed for creating these callables is very minimal and is essentially just using <code>async def</code> instead of <code>def</code> for function definitions and adding the <code>await</code> keyword to any inputs/output commands.</p>"},{"location":"user_guide/installation/","title":"Installation","text":""},{"location":"user_guide/installation/#standard-installation","title":"Standard Installation","text":"<p>As outlined in the quick start, you should be able to pip install scrapli-community \"normally\":</p> <pre><code>pip install scrapli-community\n</code></pre>"},{"location":"user_guide/installation/#installing-current-master-branch","title":"Installing current master branch","text":"<p>To install from the source repositories master branch:</p> <pre><code>pip install git+https://github.com/scrapli/scrapli_community\n</code></pre>"},{"location":"user_guide/installation/#installing-current-develop-branch","title":"Installing current develop branch","text":"<p>To install from this repositories develop branch:</p> <pre><code>pip install -e git+https://github.com/scrapli/scrapli_community.git@develop#egg=scrapli_community\n</code></pre>"},{"location":"user_guide/installation/#installation-from-source","title":"Installation from Source","text":"<p>To install from source:</p> <pre><code>git clone https://github.com/scrapli/scrapli_community\ncd scrapli_community\npython setup.py install\n</code></pre>"},{"location":"user_guide/installation/#supported-platforms","title":"Supported Platforms","text":"<p>As for platforms to run scrapli on -- it has and will be tested on MacOS and Ubuntu regularly and should work on any  POSIX system. Windows at one point was being tested very minimally via GitHub Actions builds, however this is no   longer the case as it is just not worth the effort. While scrapli should work on Windows when using the paramiko or    ssh2-python transport drivers, it is not \"officially\" supported. It is strongly recommended/preferred for folks     to use WSL/Cygwin instead of Windows.</p>"},{"location":"user_guide/project_details/","title":"Project Details","text":""},{"location":"user_guide/project_details/#what-is-a-platform","title":"What is a \"Platform\"","text":"<p>A scrapli community platform is a collection of arguments/settings that apply to a particular platform (vendor/os ). This includes settings such as privilege levels, timeouts, open/close callables, prompt patterns, and any other  scrapli arguments. Once a platform exists and scrapli community has been installed, users can simply pass an   argument \"platform\" with a value that matches the platform name and the scrapli factory (<code>Scrapli</code>) will automatically    add the appropriate platform arguments to the connection object it returns.  </p>"},{"location":"user_guide/project_details/#supported-platforms","title":"Supported Platforms","text":"<p>The following are the currently supported platforms:</p> Platform Name Vendor OS Contributor(s) Last Update Notes ruckus_fastiron Ruckus FastIron Brett Canter 2020.08.08 huawei_vrp Huawei VRP Alex Lardschneider 2020.11.13 Last update fixed minor prompt pattern issue (missing underscore)Might need to manually set <code>screen-width</code> or PTY cols, see issue #18 for more details. edgecore_ecs Edgecore ECS Alex Lardschneider 2020.09.19 For the firmware shipped by Edgecore itself fortinet_wlc Fortinet WLC Alex Lardschneider 2020.11.15 For the Meru-based OS, not the same as FortiOS aethra_atosnt Aethra ATOSNT Alex Lardschneider 2020.11.15 Tested on ATOS NT, ranging from 6.3.X up to 6.5.X: mikrotik_routeros Mikrotik RouterOS Alex Lardschneider 2020.11.15 siemens_roxii Siemens ROX II Khiem Nguyen 2021.01.30 eltex_esr Eltex \u2014 Artem Kotik 2021.01.30 Tested on Eltex ESR 1000, 1200, 1700 models with 1.11 software version hp_comware HP Comware Julien Corsini 2021.07.30 nokia_sros Nokia SROS Roman Dodin 2021.07.30 alcatel_aos Alcatel-Lucent AOS6 &amp; AOS8 Jef Vantongerloo 2021.07.30 Tested on aos6 - 6.7.2.89.R06 and aos8 - 8.6.289.R01 paloalto_panos PaloAlto PanOS Bryan Bartik 2021.07.30 Tested on PanOS 9.x and 10.x cisco_cbs Cisco CBS Andrey Grechin 2021.XX.XX Tested on SG250-08, 2.5.7.85 aruba_aoscx Aruba AOSCX Luke Bates 2021.XX.XX Tested on ArubaOS-CX 10.05.x - 10.08.x cisco_asa Cisco ASA Daniel Teycheney 2021.XX.XX Tested on ASA 9.12.x cisco_aireos Cisco AireOS Daniel Teycheney 2021.XX.XX Tested on AireOS 8.5.x vyos Open source VyOS goodNETnick 2022.06.20 Tested on VyOS 1.4-rolling-202206200217, VyOS 1.3.1-S1, VyOS 1.2.8 ruckus_unleashed Ruckus Unleashed Brett Canter 2022.09.13 Tested on Ruckus and Access Networks branded Unleashed wireless access points, version 200.12.x cumulus_linux Nvidia Linux Ilmari Aho 2022.09.28 Tested on Cumulus Linux 3.7.x and 4.3.0 cumulus_vtysh Nvidia vtysh Ilmari Aho 2022.09.28 Tested on Cumulus Linux 3.7.x and 4.3.0 raisecom_ros Raisecome ROS ikievite 2023.01.30 dlink_os D-Link OS ikievite 2023.01.30 Tested on D-Link DES-3028, DES-3200-XX (rev. A, B, C), DES-3526, DGS-3000-XX, DGS-3120-24SC, DGS-3612G"},{"location":"user_guide/project_details/#why-add-a-platform","title":"Why add a Platform","text":"<p>Why add a platform!? Because you think scrapli is awesome and want to be able to use it with whatever platform /operating system(s) you are working with of course! Scrapli is intended to be super flexible, and you can almost  certainly make it work with a platform of your choosing without building a community \"platform\", for example, you   can check out the example in scrapli core of connecting to a \"non core device\" here   this example predates scrapli communities existence, and worked just fine! </p> <p>So, again, why build a platform? Convenience and community mostly! Without a scrapli community platform, you will  need to pass all of the appropriate arguments to build a connection each time you instantiated a scrapli connection   object. Sure that is relatively easy (copy/paste!), however its a little cumbersome. Once a scrapli community    platform is created, you can simply reference the platform type and then provide only the necessary arguments such     as host and authentication information to your object instantiation. </p> <p>For example, (from the non core device example link above) without a scrapli community platform we may have to create  our device connection like so:</p> <pre><code>def wlc_on_open(cls):\n    \"\"\"Example `on_open` function for use with cisco wlc\"\"\"\n    # time.sleeps here are just because my test device was a bit sluggish, without these scrapli is\n    #  just going to send the username/password right away\n    time.sleep(0.25)\n    cls.channel.write(cls.auth_username)\n    cls.channel.send_return()\n    time.sleep(0.25)\n    cls.channel.write(cls.auth_password)\n    cls.channel.send_return()\n\n\nwlc = {\n    \"host\": \"1.2.3.4\",\n    \"auth_username\": \"some_username\",\n    \"auth_password\": \"some_password\",\n    \"auth_strict_key\": False,\n    \"auth_bypass\": True,\n    # set a custom \"on_open\" function to deal with the non-standard login\n    \"on_open\": wlc_on_open,\n    # set a custom \"comms_prompt_pattern\" to deal with the non-standard prompt pattern\n    \"comms_prompt_pattern\": r\"^\\(Cisco Controller\\) &gt;$\",\n}\n\nconn = GenericDriver(**wlc)\n</code></pre> <p>With a community platform created our connection creation may end up being as simple as:</p> <pre><code>wlc = {\n    \"host\": \"1.2.3.4\",\n    \"auth_username\": \"some_username\",\n    \"auth_password\": \"some_password\",\n    \"auth_strict_key\": False,\n    \"platform\": \"cisco_wlc\"\n}\n\nconn = Scrapli(**wlc)\n</code></pre>"},{"location":"user_guide/project_details/#related-scrapli-libraries","title":"Related Scrapli Libraries","text":"<p>This repo is the \"community\" platform repository for scrapli, you can find more out about the other scrapli  libraries, including scrapli \"core\", below:</p> <ul> <li>scrapli</li> <li>scrapli_netconf</li> <li>scrapli_cfg</li> <li>scrapli_replay </li> <li>nornir_scrapli</li> </ul>"},{"location":"user_guide/quickstart/","title":"Quick Start Guide","text":""},{"location":"user_guide/quickstart/#installation","title":"Installation","text":"<p>In most cases installation via pip is the simplest and best way to install scrapli-community.</p> <pre><code>pip install scrapli-community\n</code></pre>"},{"location":"user_guide/quickstart/#a-simple-example","title":"A Simple Example","text":"<pre><code>from scrapli import Scrapli\n\nmy_device = {\n    \"host\": \"172.18.0.11\",\n    \"auth_username\": \"vrnetlab\",\n    \"auth_password\": \"VR-netlab9\",\n    \"auth_strict_key\": False,\n    \"platform\": \"ruckus_fastiron\"\n}\n\nconn = Scrapli(**my_device)\nconn.open()\n</code></pre>"},{"location":"user_guide/versioning/","title":"Versioning","text":"<p>Please see the scrapli \"core\" here documentation for versioning information.</p>"}]}