{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"scrapli community \u00b6 This is the scrapli_community repository for scrapli . If you would like to use scrapli, but the platform(s) that you work with are not supported in the \"core\" scrapli platforms, you have come to the right place! This library is intended to be a place for scrapli users to add additional platform support to scrapli. Please see the main scrapli repo for much more information about the main project.","title":"Scrapli Community"},{"location":"#scrapli-community","text":"This is the scrapli_community repository for scrapli . If you would like to use scrapli, but the platform(s) that you work with are not supported in the \"core\" scrapli platforms, you have come to the right place! This library is intended to be a place for scrapli users to add additional platform support to scrapli. Please see the main scrapli repo for much more information about the main project.","title":"scrapli community"},{"location":"changelog/","text":"CHANGELOG \u00b6 2022.07.30 \u00b6 Add Versa Flex VNF -- see #119 Add Vyos -- see #134 UPdated Huawei prompt for config mode -- see #118 2022.01.30 \u00b6 Add Cisco CBS -- see #76 Add Aruba AOSCX -- see #80 Dropped Python3.6 support as it is now EOL! Of course, scrapli probably still works just fine with 3.6 (if you install the old 3.6 requirements), but we won't test/support it anymore. 2021.07.30 \u00b6 Add HP Comware (thank you to Julien!) -- see #36 Add Nokia SROS (thank you to Roman Dodin!) -- see #51 Fixed silly naming of the sync/async module in each package to match scrapli core naming standard Add Alcatel AOS (thank you to Jef Vantongerloo) -- see #58 Add Palo Alto PanOS (thank you to Bryan Bartik) -- see #69 2021.01.30 \u00b6 Add Siemens ROX II (thank you again Khiem Nguyen!) -- see #31 Updated privilege level imports location to match scrapli core overhaul 2020.11.15 \u00b6 Add Fortinet WLC (thank you again Alex!) -- see #6 Add Aethra ATOSNT (Alex!!!) -- see #9 Fix screen width on Huawei VRP (Alex again!) -- see #18 2020.09.19 \u00b6 Add Ruckus Fastiron Platform (thank you Brett!) Add Edgecore ECS Platform (thank you Alex!) Add some bits to the example scrapli driver for testing purposes for scrapli core ++ supporting users creating their own device classes so they can build custom methods/override existing methods Add 3.9 to weekly/commit testing 2020.08.08 \u00b6 First draft of scrapli_community!","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"CHANGELOG"},{"location":"changelog/#20220730","text":"Add Versa Flex VNF -- see #119 Add Vyos -- see #134 UPdated Huawei prompt for config mode -- see #118","title":"2022.07.30"},{"location":"changelog/#20220130","text":"Add Cisco CBS -- see #76 Add Aruba AOSCX -- see #80 Dropped Python3.6 support as it is now EOL! Of course, scrapli probably still works just fine with 3.6 (if you install the old 3.6 requirements), but we won't test/support it anymore.","title":"2022.01.30"},{"location":"changelog/#20210730","text":"Add HP Comware (thank you to Julien!) -- see #36 Add Nokia SROS (thank you to Roman Dodin!) -- see #51 Fixed silly naming of the sync/async module in each package to match scrapli core naming standard Add Alcatel AOS (thank you to Jef Vantongerloo) -- see #58 Add Palo Alto PanOS (thank you to Bryan Bartik) -- see #69","title":"2021.07.30"},{"location":"changelog/#20210130","text":"Add Siemens ROX II (thank you again Khiem Nguyen!) -- see #31 Updated privilege level imports location to match scrapli core overhaul","title":"2021.01.30"},{"location":"changelog/#20201115","text":"Add Fortinet WLC (thank you again Alex!) -- see #6 Add Aethra ATOSNT (Alex!!!) -- see #9 Fix screen width on Huawei VRP (Alex again!) -- see #18","title":"2020.11.15"},{"location":"changelog/#20200919","text":"Add Ruckus Fastiron Platform (thank you Brett!) Add Edgecore ECS Platform (thank you Alex!) Add some bits to the example scrapli driver for testing purposes for scrapli core ++ supporting users creating their own device classes so they can build custom methods/override existing methods Add 3.9 to weekly/commit testing","title":"2020.09.19"},{"location":"changelog/#20200808","text":"First draft of scrapli_community!","title":"2020.08.08"},{"location":"about/code_of_conduct/","text":"Code of Conduct \u00b6 Be excellent to each other!","title":"Code of Conduct"},{"location":"about/code_of_conduct/#code-of-conduct","text":"Be excellent to each other!","title":"Code of Conduct"},{"location":"about/contributing/","text":"Contributing \u00b6 Thanks for thinking about contributing! Contributions are not expected, but are quite welcome. Contributions of all kinds are welcomed -- typos, doc updates, adding examples, bug fixes, and feature adds. Some notes on contributing: Please open a GitHub discussion topic for any potential feature adds/changes to discuss them prior to opening a PR, this way everyone has a chance to chime in and make sure we're all on the same page! Please open an issue to discuss any bugs/bug fixes prior to opening a PR. Once we all have discussed any adds/changes, pull requests are very much welcome and appreciated! All PRs should pass tests/CI linting -- checkout the Makefile for some shortcuts for linting and testing. Please include tests! Even simple/basic tests are better than nothing -- it helps make sure changes in the future don't break functionality or make things act in unexpected ways!","title":"Contributing"},{"location":"about/contributing/#contributing","text":"Thanks for thinking about contributing! Contributions are not expected, but are quite welcome. Contributions of all kinds are welcomed -- typos, doc updates, adding examples, bug fixes, and feature adds. Some notes on contributing: Please open a GitHub discussion topic for any potential feature adds/changes to discuss them prior to opening a PR, this way everyone has a chance to chime in and make sure we're all on the same page! Please open an issue to discuss any bugs/bug fixes prior to opening a PR. Once we all have discussed any adds/changes, pull requests are very much welcome and appreciated! All PRs should pass tests/CI linting -- checkout the Makefile for some shortcuts for linting and testing. Please include tests! Even simple/basic tests are better than nothing -- it helps make sure changes in the future don't break functionality or make things act in unexpected ways!","title":"Contributing"},{"location":"more_scrapli/nornir_scrapli/","text":"Nornir scrapli \u00b6 If you want to use scrapli, but don't want to deal with handling concurrency yourself, there is great news! The nornir_scrapli plugin allows you to use scrapli (and scrapli netconf and scrapli cfg) within the Nornir framework!","title":"Nornir Scrapli"},{"location":"more_scrapli/nornir_scrapli/#nornir-scrapli","text":"If you want to use scrapli, but don't want to deal with handling concurrency yourself, there is great news! The nornir_scrapli plugin allows you to use scrapli (and scrapli netconf and scrapli cfg) within the Nornir framework!","title":"Nornir scrapli"},{"location":"more_scrapli/scrapli/","text":"Scrapli \u00b6 scrapli ( docs ) is the \"parent\" scrapli library. Check it out if you need to connect to devices with telnet or ssh!","title":"Scrapli"},{"location":"more_scrapli/scrapli/#scrapli","text":"scrapli ( docs ) is the \"parent\" scrapli library. Check it out if you need to connect to devices with telnet or ssh!","title":"Scrapli"},{"location":"more_scrapli/scrapli_cfg/","text":"Scrapli Cfg \u00b6 scrapli_cfg ( docs ) is utility that accepts a scrapli Telnet or SSH connection and provides configuration management capabilities. scrapli_cfg allows you to load candidate configurations for merge or replace operations, generate diffs of the current vs candidate, and of course commit or abort the candidate configuration.","title":"Scrapli Cfg"},{"location":"more_scrapli/scrapli_cfg/#scrapli-cfg","text":"scrapli_cfg ( docs ) is utility that accepts a scrapli Telnet or SSH connection and provides configuration management capabilities. scrapli_cfg allows you to load candidate configurations for merge or replace operations, generate diffs of the current vs candidate, and of course commit or abort the candidate configuration.","title":"Scrapli Cfg"},{"location":"more_scrapli/scrapli_netconf/","text":"Scrapli Netconf \u00b6 scrapli_netconf ( docs ) is a netconf driver built on top of scrapli. The purpose of scrapli_netconf is to provide a fast, flexible, thoroughly tested, well typed, well documented, simple API that supports both synchronous and asynchronous usage. Working together scrapli and scrapli_netconf aim to provide a consistent (as is practical) look and feel when automating devices over telnet, SSH, or netconf (over SSH).","title":"Scrapli Netconf"},{"location":"more_scrapli/scrapli_netconf/#scrapli-netconf","text":"scrapli_netconf ( docs ) is a netconf driver built on top of scrapli. The purpose of scrapli_netconf is to provide a fast, flexible, thoroughly tested, well typed, well documented, simple API that supports both synchronous and asynchronous usage. Working together scrapli and scrapli_netconf aim to provide a consistent (as is practical) look and feel when automating devices over telnet, SSH, or netconf (over SSH).","title":"Scrapli Netconf"},{"location":"more_scrapli/scrapli_replay/","text":"Scrapli Replay \u00b6 scrapli_replay ( docs ) is a set of tools used to help test scrapli programs. scrapli_replay includes a utility to capture command input/output from real life servers and replay them in a semi-interactive fashion, as well as a pytest plugin that patches and records and replays session data (like vcr.py ) for scrapli connections.","title":"Scrapli Replay"},{"location":"more_scrapli/scrapli_replay/#scrapli-replay","text":"scrapli_replay ( docs ) is a set of tools used to help test scrapli programs. scrapli_replay includes a utility to capture command input/output from real life servers and replay them in a semi-interactive fashion, as well as a pytest plugin that patches and records and replays session data (like vcr.py ) for scrapli connections.","title":"Scrapli Replay"},{"location":"user_guide/basic_usage/","text":"Basic Usage \u00b6 Adding a Platform \u00b6 Adding a platform to be supported by scrapli is a fairly straight forward process! Before getting started there are a few things to understand about scrapli: scrapli is fairly low level -- this means that the assumption is that the user will deal with most* platform specific things such as saving configurations, copying files, and things like that. scrapli assumes that the ssh channel/session will behave \"normally\" -- as in look and feel like a typical network operating system ssh session (just like all the \"core\" platforms behave). * scrapli does however handle privilege levels/escalation/deescalation Before jumping into how to build a platform, it is best to start off with rehashing what exactly a platform is! A platform is simply a collection of arguments/callables (functions) defined in a dictionary. This SCRAPLI_PLATFORM dictionary is loaded up by the scrapli factory classes ( Scrapli and AsyncScrapli ) and used to instantiate an object built on the GenericDriver or NetworkDriver classes in scrapli. The reasoning behind platforms not being simply classes that inherit from the GenericDriver or NetworkDriver as the current \"core\" platforms do, is to keep scrapli core as loosely coupled to the platforms as is possible /practical -- this is hugely important to help ensure that scrapli core has as little \"cruft\" as possible, and stays well tested/documented/etc., while still allowing users to adapt scrapli to work with various platforms easily. A SCRAPLI_PLATFORM dictionary (the dictionary defining the platform) is made up of only three main top level keys: driver_type -- simply generic or network , no other options are allowed defaults -- a dictionary containing all required arguments to create a connection object variants -- a dictionary of dictionaries containing any types of variations to the \"defaults\" section -- this allows users to have different \"profiles\" for a specific device type; for example there may be a variant that has a different \"on_open\" callable that disables paging differently for newer versions of a platform or something like that Before jumping into details about what these all mean/do, here is an example platform dictionary: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 SCRAPLI_PLATFORM = { \"driver_type\" : \"network\" , \"defaults\" : { \"privilege_levels\" : DEFAULT_PRIVILEGE_LEVELS , \"default_desired_privilege_level\" : \"privilege_exec\" , \"sync_on_open\" : default_sync_on_open , \"async_on_open\" : default_async_on_open , \"sync_on_close\" : default_sync_on_close , \"async_on_close\" : default_async_on_close , \"failed_when_contains\" : [ \"% Ambiguous command\" , \"% Incomplete command\" , \"% Invalid input detected\" , \"% Unknown command\" , ], \"textfsm_platform\" : \"cisco_iosxe\" , \"genie_platform\" : \"iosxe\" , }, \"variants\" : { # not useful, just an example \"test_variant1\" : { \"default_desired_privilege_level\" : \"configuration\" } }, } The following sections will outline each of these values and what they mean/how they are used. Driver Type \u00b6 As mentioned above, there are only two primary values for the driver_type argument, this can be either \"generic\" or \"network\" and indicates which base driver class to use in scrapli core. If your device platform has the concept of different privilege levels then you should select \"network\", otherwise \"generic\". Most network specific platforms will likely be built with the \"network\" option selected (probably). You can also create your own class (inheriting from either the NetworkDriver or GenericDriver or their asyncio counterparts) if you wish to be able to override any methods of those classes or to implement your own methods. Note that depending on the type selected for driver_type there will be slightly different required arguments -- please see the example/test generic and network drivers in the scrapli vendor directory directory. Note that the docs here in the README will focus on the \"network\" type as that is likely going to be more common and is slightly more involved. Defaults \u00b6 The \"defaults\" section contains all of the most \"normal\" or common arguments/settings for a given platform. All scrapli NetworkDriver or GenericDriver (depending on the platform you selected) arguments are valid here. Here are the most commonly needed arguments, see the scrapli core docs for all available options. Argument Type Required Purpose privilege_levels Dict [str: PrivilegeLevel] True dictionary defining device priv levels default_desired_privilege_level str True string of desired default priv level sync_on_open Callable False callable to run \"on open\" async_on_open Callable False asyncio callable to run \"on open\" sync_on_close Callable False callable to run \"on close\" async_on_close Callable False asyncio callable to run \"on close\" failed_when_contains List [str] False list of strings indicating command failure textfsm_platform str False platform name for textfms/ntc parser genie_platform str False platform name for genie parser Any arguments provided here in the \"defaults\" section are simply passed to the NetworkDriver or GenericDriver . The reason this section is called \"defaults\" is that the arguments set here should apply to the broadest number of devices of a given platform. That said, it is of course possible that there are sometimes variations within even a single platform type (i.e. Cisco IOSXE) that may cause some of the default arguments to fail. That is where variants come in! Variants \u00b6 The \"variants\" section is nearly identical to the \"defaults\" section in that it provides arguments that will be passed to the underlying scrapli driver. There are two big differences for this section though; firstly, there is one extra level of nesting here -- \"variants\" is a dict of dicts with the top level keys of those dicts being the name of the variant, and the values of that dict being the actual values for the driver arguments. Here is an example: 1 2 3 4 5 \"variants\" : { \"test_variant1\" : { \"comms_prompt_pattern\" : r \"^\\(BLAH\\) >$\" } }, The next thing you may notice is that there are many fewer arguments here! The reason being is that the \"variants \" are merged with the arguments in the \"defaults\" section. The idea here is that there may be some vendor \"Acme\" that has an operating system called \"Tacocat\", but that os \"Tacocat\" has a few different options for login prompts for example. In most cases the \"Acme Tacocat\" operating system has a \"normal\" login process that just prompts for authentication and then lets you onto the router as per usual, but there may be a \"variant\"(!) that has a banner or some kind of prompt that the user must enter \"OK\" or \"I ACCEPT\" or something like that before being able to log on. This is what the \"variant\" is designed to handle -- nothing needs to change for this variant to work other than passing a new on_open method that is designed to deal with this different logon prompt. Privilege Levels \u00b6 Privilege levels are critically important for any platform using the network driver_type -- this dictionary of PrivilegeLevel objects tells scrapli about the different \"modes\"/privilege levels of the platform, and how to get into and out of each of them. Below is an example taken from the scrapli_networkdriver example/test platform: 1 2 3 4 5 6 7 8 9 10 11 \"configuration\": ( PrivilegeLevel( pattern=r\"^[a-z0-9.\\-_@/:]{1,63}\\(conf[a-z0-9.\\-@/:\\+]{0,32}\\)#$\", name=\"configuration\", previous_priv=\"privilege_exec\", deescalate=\"end\", escalate=\"configure terminal\", escalate_auth=False, escalate_prompt=\"\", ) ), The key of the dictionary is \"configuration\" (the name of the privilege level), and the value is a PrivilegeLevel object. You can read more about privilege levels in the scrapli docs here . The main takeaway is that it is vitally important to get the privilege levels correct, so take care to ensure these are very accurate -- especially the pattern argument -- it is very easy to miss a character/symbol that is valid for a prompt pattern, and this will cause scrapli to fail! Sync and Asyncio \u00b6 Regardless of your requirements of sync vs asyncio, all community platforms must include both synchronous and aysncio support or they will not be merged. Even if you have never done anything with asyncio, this is a pretty small and straight forward requirement to satisfy. At the moment the only place that requires any special attention to sync and asyncio differences is for the \"on open\" and \"on close\" callables, please see the following section for details. Open and Close Callables \u00b6 Scrapli provides the option for users to pass in their own callables to be executed after authentication and prior to closing the connection, you can read more about these in the scrapli docs here . In order to create a new scrapli-community platform, you almost certainly will need to provide these callables -- and if they are required are required in both sync and asyncio form. In general the on open callable needs to acquire the default desired privilege level (ex: \"privilege exec\" in IOSXE terms) and disable any kind of width/height settings on the terminal (disable pagination). Some other platforms may have differing requirements here such as handling login prompts/banners, performing additional authentication, or disabling other terminal behavior such as \"complete on space\" in Junos. The on close callable is much less important, but is nice to have to ensure that connections are \"cleanly\" closed -- this callable should generally handle the graceful exit/logout only. If you have never written asyncio code and are interested in submitting a platform, please see the example platform code, the asycnio needed for creating these callables is very minimal and is essentially just using async def instead of def for function definitions and adding the await keyword to any inputs/output commands.","title":"Basic Usage"},{"location":"user_guide/basic_usage/#basic-usage","text":"","title":"Basic Usage"},{"location":"user_guide/basic_usage/#adding-a-platform","text":"Adding a platform to be supported by scrapli is a fairly straight forward process! Before getting started there are a few things to understand about scrapli: scrapli is fairly low level -- this means that the assumption is that the user will deal with most* platform specific things such as saving configurations, copying files, and things like that. scrapli assumes that the ssh channel/session will behave \"normally\" -- as in look and feel like a typical network operating system ssh session (just like all the \"core\" platforms behave). * scrapli does however handle privilege levels/escalation/deescalation Before jumping into how to build a platform, it is best to start off with rehashing what exactly a platform is! A platform is simply a collection of arguments/callables (functions) defined in a dictionary. This SCRAPLI_PLATFORM dictionary is loaded up by the scrapli factory classes ( Scrapli and AsyncScrapli ) and used to instantiate an object built on the GenericDriver or NetworkDriver classes in scrapli. The reasoning behind platforms not being simply classes that inherit from the GenericDriver or NetworkDriver as the current \"core\" platforms do, is to keep scrapli core as loosely coupled to the platforms as is possible /practical -- this is hugely important to help ensure that scrapli core has as little \"cruft\" as possible, and stays well tested/documented/etc., while still allowing users to adapt scrapli to work with various platforms easily. A SCRAPLI_PLATFORM dictionary (the dictionary defining the platform) is made up of only three main top level keys: driver_type -- simply generic or network , no other options are allowed defaults -- a dictionary containing all required arguments to create a connection object variants -- a dictionary of dictionaries containing any types of variations to the \"defaults\" section -- this allows users to have different \"profiles\" for a specific device type; for example there may be a variant that has a different \"on_open\" callable that disables paging differently for newer versions of a platform or something like that Before jumping into details about what these all mean/do, here is an example platform dictionary: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 SCRAPLI_PLATFORM = { \"driver_type\" : \"network\" , \"defaults\" : { \"privilege_levels\" : DEFAULT_PRIVILEGE_LEVELS , \"default_desired_privilege_level\" : \"privilege_exec\" , \"sync_on_open\" : default_sync_on_open , \"async_on_open\" : default_async_on_open , \"sync_on_close\" : default_sync_on_close , \"async_on_close\" : default_async_on_close , \"failed_when_contains\" : [ \"% Ambiguous command\" , \"% Incomplete command\" , \"% Invalid input detected\" , \"% Unknown command\" , ], \"textfsm_platform\" : \"cisco_iosxe\" , \"genie_platform\" : \"iosxe\" , }, \"variants\" : { # not useful, just an example \"test_variant1\" : { \"default_desired_privilege_level\" : \"configuration\" } }, } The following sections will outline each of these values and what they mean/how they are used.","title":"Adding a Platform"},{"location":"user_guide/basic_usage/#driver-type","text":"As mentioned above, there are only two primary values for the driver_type argument, this can be either \"generic\" or \"network\" and indicates which base driver class to use in scrapli core. If your device platform has the concept of different privilege levels then you should select \"network\", otherwise \"generic\". Most network specific platforms will likely be built with the \"network\" option selected (probably). You can also create your own class (inheriting from either the NetworkDriver or GenericDriver or their asyncio counterparts) if you wish to be able to override any methods of those classes or to implement your own methods. Note that depending on the type selected for driver_type there will be slightly different required arguments -- please see the example/test generic and network drivers in the scrapli vendor directory directory. Note that the docs here in the README will focus on the \"network\" type as that is likely going to be more common and is slightly more involved.","title":"Driver Type"},{"location":"user_guide/basic_usage/#defaults","text":"The \"defaults\" section contains all of the most \"normal\" or common arguments/settings for a given platform. All scrapli NetworkDriver or GenericDriver (depending on the platform you selected) arguments are valid here. Here are the most commonly needed arguments, see the scrapli core docs for all available options. Argument Type Required Purpose privilege_levels Dict [str: PrivilegeLevel] True dictionary defining device priv levels default_desired_privilege_level str True string of desired default priv level sync_on_open Callable False callable to run \"on open\" async_on_open Callable False asyncio callable to run \"on open\" sync_on_close Callable False callable to run \"on close\" async_on_close Callable False asyncio callable to run \"on close\" failed_when_contains List [str] False list of strings indicating command failure textfsm_platform str False platform name for textfms/ntc parser genie_platform str False platform name for genie parser Any arguments provided here in the \"defaults\" section are simply passed to the NetworkDriver or GenericDriver . The reason this section is called \"defaults\" is that the arguments set here should apply to the broadest number of devices of a given platform. That said, it is of course possible that there are sometimes variations within even a single platform type (i.e. Cisco IOSXE) that may cause some of the default arguments to fail. That is where variants come in!","title":"Defaults"},{"location":"user_guide/basic_usage/#variants","text":"The \"variants\" section is nearly identical to the \"defaults\" section in that it provides arguments that will be passed to the underlying scrapli driver. There are two big differences for this section though; firstly, there is one extra level of nesting here -- \"variants\" is a dict of dicts with the top level keys of those dicts being the name of the variant, and the values of that dict being the actual values for the driver arguments. Here is an example: 1 2 3 4 5 \"variants\" : { \"test_variant1\" : { \"comms_prompt_pattern\" : r \"^\\(BLAH\\) >$\" } }, The next thing you may notice is that there are many fewer arguments here! The reason being is that the \"variants \" are merged with the arguments in the \"defaults\" section. The idea here is that there may be some vendor \"Acme\" that has an operating system called \"Tacocat\", but that os \"Tacocat\" has a few different options for login prompts for example. In most cases the \"Acme Tacocat\" operating system has a \"normal\" login process that just prompts for authentication and then lets you onto the router as per usual, but there may be a \"variant\"(!) that has a banner or some kind of prompt that the user must enter \"OK\" or \"I ACCEPT\" or something like that before being able to log on. This is what the \"variant\" is designed to handle -- nothing needs to change for this variant to work other than passing a new on_open method that is designed to deal with this different logon prompt.","title":"Variants"},{"location":"user_guide/basic_usage/#privilege-levels","text":"Privilege levels are critically important for any platform using the network driver_type -- this dictionary of PrivilegeLevel objects tells scrapli about the different \"modes\"/privilege levels of the platform, and how to get into and out of each of them. Below is an example taken from the scrapli_networkdriver example/test platform: 1 2 3 4 5 6 7 8 9 10 11 \"configuration\": ( PrivilegeLevel( pattern=r\"^[a-z0-9.\\-_@/:]{1,63}\\(conf[a-z0-9.\\-@/:\\+]{0,32}\\)#$\", name=\"configuration\", previous_priv=\"privilege_exec\", deescalate=\"end\", escalate=\"configure terminal\", escalate_auth=False, escalate_prompt=\"\", ) ), The key of the dictionary is \"configuration\" (the name of the privilege level), and the value is a PrivilegeLevel object. You can read more about privilege levels in the scrapli docs here . The main takeaway is that it is vitally important to get the privilege levels correct, so take care to ensure these are very accurate -- especially the pattern argument -- it is very easy to miss a character/symbol that is valid for a prompt pattern, and this will cause scrapli to fail!","title":"Privilege Levels"},{"location":"user_guide/basic_usage/#sync-and-asyncio","text":"Regardless of your requirements of sync vs asyncio, all community platforms must include both synchronous and aysncio support or they will not be merged. Even if you have never done anything with asyncio, this is a pretty small and straight forward requirement to satisfy. At the moment the only place that requires any special attention to sync and asyncio differences is for the \"on open\" and \"on close\" callables, please see the following section for details.","title":"Sync and Asyncio"},{"location":"user_guide/basic_usage/#open-and-close-callables","text":"Scrapli provides the option for users to pass in their own callables to be executed after authentication and prior to closing the connection, you can read more about these in the scrapli docs here . In order to create a new scrapli-community platform, you almost certainly will need to provide these callables -- and if they are required are required in both sync and asyncio form. In general the on open callable needs to acquire the default desired privilege level (ex: \"privilege exec\" in IOSXE terms) and disable any kind of width/height settings on the terminal (disable pagination). Some other platforms may have differing requirements here such as handling login prompts/banners, performing additional authentication, or disabling other terminal behavior such as \"complete on space\" in Junos. The on close callable is much less important, but is nice to have to ensure that connections are \"cleanly\" closed -- this callable should generally handle the graceful exit/logout only. If you have never written asyncio code and are interested in submitting a platform, please see the example platform code, the asycnio needed for creating these callables is very minimal and is essentially just using async def instead of def for function definitions and adding the await keyword to any inputs/output commands.","title":"Open and Close Callables"},{"location":"user_guide/installation/","text":"Installation \u00b6 Standard Installation \u00b6 As outlined in the quick start, you should be able to pip install scrapli-community \"normally\": 1 pip install scrapli-community Installing current master branch \u00b6 To install from the source repositories master branch: 1 pip install git+https://github.com/scrapli/scrapli_community Installing current develop branch \u00b6 To install from this repositories develop branch: 1 pip install -e git+https://github.com/scrapli/scrapli_community.git@develop#egg=scrapli_community Installation from Source \u00b6 To install from source: 1 2 3 git clone https://github.com/scrapli/scrapli_community cd scrapli_community python setup.py install Supported Platforms \u00b6 As for platforms to run scrapli on -- it has and will be tested on MacOS and Ubuntu regularly and should work on any POSIX system. Windows at one point was being tested very minimally via GitHub Actions builds, however this is no longer the case as it is just not worth the effort. While scrapli should work on Windows when using the paramiko or ssh2-python transport drivers, it is not \"officially\" supported. It is strongly recommended/preferred for folks to use WSL/Cygwin instead of Windows.","title":"Installation"},{"location":"user_guide/installation/#installation","text":"","title":"Installation"},{"location":"user_guide/installation/#standard-installation","text":"As outlined in the quick start, you should be able to pip install scrapli-community \"normally\": 1 pip install scrapli-community","title":"Standard Installation"},{"location":"user_guide/installation/#installing-current-master-branch","text":"To install from the source repositories master branch: 1 pip install git+https://github.com/scrapli/scrapli_community","title":"Installing current master branch"},{"location":"user_guide/installation/#installing-current-develop-branch","text":"To install from this repositories develop branch: 1 pip install -e git+https://github.com/scrapli/scrapli_community.git@develop#egg=scrapli_community","title":"Installing current develop branch"},{"location":"user_guide/installation/#installation-from-source","text":"To install from source: 1 2 3 git clone https://github.com/scrapli/scrapli_community cd scrapli_community python setup.py install","title":"Installation from Source"},{"location":"user_guide/installation/#supported-platforms","text":"As for platforms to run scrapli on -- it has and will be tested on MacOS and Ubuntu regularly and should work on any POSIX system. Windows at one point was being tested very minimally via GitHub Actions builds, however this is no longer the case as it is just not worth the effort. While scrapli should work on Windows when using the paramiko or ssh2-python transport drivers, it is not \"officially\" supported. It is strongly recommended/preferred for folks to use WSL/Cygwin instead of Windows.","title":"Supported Platforms"},{"location":"user_guide/project_details/","text":"Project Details \u00b6 What is a \"Platform\" \u00b6 A scrapli community platform is a collection of arguments/settings that apply to a particular platform (vendor/os ). This includes settings such as privilege levels, timeouts, open/close callables, prompt patterns, and any other scrapli arguments. Once a platform exists and scrapli community has been installed, users can simply pass an argument \"platform\" with a value that matches the platform name and the scrapli factory ( Scrapli ) will automatically add the appropriate platform arguments to the connection object it returns. Supported Platforms \u00b6 The following are the currently supported platforms: Platform Name Vendor OS Contributor(s) Last Update Notes ruckus_fastiron Ruckus FastIron Brett Canter 2020.08.08 huawei_vrp Huawei VRP Alex Lardschneider 2020.11.13 Last update fixed minor prompt pattern issue (missing underscore) Might need to manually set screen-width or PTY cols, see issue #18 for more details. edgecore_ecs Edgecore ECS Alex Lardschneider 2020.09.19 For the firmware shipped by Edgecore itself fortinet_wlc Fortinet WLC Alex Lardschneider 2020.11.15 For the Meru-based OS, not the same as FortiOS aethra_atosnt Aethra ATOSNT Alex Lardschneider 2020.11.15 Tested on ATOS NT, ranging from 6.3.X up to 6.5.X: mikrotik_routeros Mikrotik RouterOS Alex Lardschneider 2020.11.15 siemens_roxii Siemens ROX II Khiem Nguyen 2021.01.30 eltex_esr Eltex \u2014 Artem Kotik 2021.01.30 Tested on Eltex ESR 1000, 1200, 1700 models with 1.11 software version hp_comware HP Comware Julien Corsini 2021.07.30 nokia_sros Nokia SROS Roman Dodin 2021.07.30 alcatel_aos Alcatel-Lucent AOS6 & AOS8 Jef Vantongerloo 2021.07.30 Tested on aos6 - 6.7.2.89.R06 and aos8 - 8.6.289.R01 paloalto_panos PaloAlto PanOS Bryan Bartik 2021.07.30 Tested on PanOS 9.x and 10.x cisco_cbs Cisco CBS Andrey Grechin 2021.XX.XX Tested on SG250-08, 2.5.7.85 aruba_aoscx Aruba AOSCX Luke Bates 2021.XX.XX Tested on ArubaOS-CX 10.05.x - 10.08.x cisco_asa Cisco ASA Daniel Teycheney 2021.XX.XX Tested on ASA 9.12.x cisco_aireos Cisco AireOS Daniel Teycheney 2021.XX.XX Tested on AireOS 8.5.x vyos Open source VyOS goodNETnick 2022.06.20 Tested on VyOS 1.4-rolling-202206200217, VyOS 1.3.1-S1, VyOS 1.2.8 Why add a Platform \u00b6 Why add a platform!? Because you think scrapli is awesome and want to be able to use it with whatever platform /operating system(s) you are working with of course! Scrapli is intended to be super flexible, and you can almost certainly make it work with a platform of your choosing without building a community \"platform\", for example, you can check out the example in scrapli core of connecting to a \"non core device\" here this example predates scrapli communities existence, and worked just fine! So, again, why build a platform? Convenience and community mostly! Without a scrapli community platform, you will need to pass all of the appropriate arguments to build a connection each time you instantiated a scrapli connection object. Sure that is relatively easy (copy/paste!), however its a little cumbersome. Once a scrapli community platform is created, you can simply reference the platform type and then provide only the necessary arguments such as host and authentication information to your object instantiation. For example, (from the non core device example link above) without a scrapli community platform we may have to create our device connection like so: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def wlc_on_open(cls): \"\"\"Example `on_open` function for use with cisco wlc\"\"\" # time.sleeps here are just because my test device was a bit sluggish, without these scrapli is # just going to send the username/password right away time.sleep(0.25) cls.channel.write(cls.auth_username) cls.channel.send_return() time.sleep(0.25) cls.channel.write(cls.auth_password) cls.channel.send_return() wlc = { \"host\": \"1.2.3.4\", \"auth_username\": \"some_username\", \"auth_password\": \"some_password\", \"auth_strict_key\": False, \"auth_bypass\": True, # set a custom \"on_open\" function to deal with the non-standard login \"on_open\": wlc_on_open, # set a custom \"comms_prompt_pattern\" to deal with the non-standard prompt pattern \"comms_prompt_pattern\": r\"^\\(Cisco Controller\\) >$\", } conn = GenericDriver(**wlc) With a community platform created our connection creation may end up being as simple as: 1 2 3 4 5 6 7 8 9 wlc = { \"host\": \"1.2.3.4\", \"auth_username\": \"some_username\", \"auth_password\": \"some_password\", \"auth_strict_key\": False, \"platform\": \"cisco_wlc\" } conn = Scrapli(**wlc) Related Scrapli Libraries \u00b6 This repo is the \"community\" platform repository for scrapli, you can find more out about the other scrapli libraries, including scrapli \"core\", below: scrapli scrapli_netconf scrapli_cfg scrapli_replay nornir_scrapli","title":"Project Details"},{"location":"user_guide/project_details/#project-details","text":"","title":"Project Details"},{"location":"user_guide/project_details/#what-is-a-platform","text":"A scrapli community platform is a collection of arguments/settings that apply to a particular platform (vendor/os ). This includes settings such as privilege levels, timeouts, open/close callables, prompt patterns, and any other scrapli arguments. Once a platform exists and scrapli community has been installed, users can simply pass an argument \"platform\" with a value that matches the platform name and the scrapli factory ( Scrapli ) will automatically add the appropriate platform arguments to the connection object it returns.","title":"What is a \"Platform\""},{"location":"user_guide/project_details/#supported-platforms","text":"The following are the currently supported platforms: Platform Name Vendor OS Contributor(s) Last Update Notes ruckus_fastiron Ruckus FastIron Brett Canter 2020.08.08 huawei_vrp Huawei VRP Alex Lardschneider 2020.11.13 Last update fixed minor prompt pattern issue (missing underscore) Might need to manually set screen-width or PTY cols, see issue #18 for more details. edgecore_ecs Edgecore ECS Alex Lardschneider 2020.09.19 For the firmware shipped by Edgecore itself fortinet_wlc Fortinet WLC Alex Lardschneider 2020.11.15 For the Meru-based OS, not the same as FortiOS aethra_atosnt Aethra ATOSNT Alex Lardschneider 2020.11.15 Tested on ATOS NT, ranging from 6.3.X up to 6.5.X: mikrotik_routeros Mikrotik RouterOS Alex Lardschneider 2020.11.15 siemens_roxii Siemens ROX II Khiem Nguyen 2021.01.30 eltex_esr Eltex \u2014 Artem Kotik 2021.01.30 Tested on Eltex ESR 1000, 1200, 1700 models with 1.11 software version hp_comware HP Comware Julien Corsini 2021.07.30 nokia_sros Nokia SROS Roman Dodin 2021.07.30 alcatel_aos Alcatel-Lucent AOS6 & AOS8 Jef Vantongerloo 2021.07.30 Tested on aos6 - 6.7.2.89.R06 and aos8 - 8.6.289.R01 paloalto_panos PaloAlto PanOS Bryan Bartik 2021.07.30 Tested on PanOS 9.x and 10.x cisco_cbs Cisco CBS Andrey Grechin 2021.XX.XX Tested on SG250-08, 2.5.7.85 aruba_aoscx Aruba AOSCX Luke Bates 2021.XX.XX Tested on ArubaOS-CX 10.05.x - 10.08.x cisco_asa Cisco ASA Daniel Teycheney 2021.XX.XX Tested on ASA 9.12.x cisco_aireos Cisco AireOS Daniel Teycheney 2021.XX.XX Tested on AireOS 8.5.x vyos Open source VyOS goodNETnick 2022.06.20 Tested on VyOS 1.4-rolling-202206200217, VyOS 1.3.1-S1, VyOS 1.2.8","title":"Supported Platforms"},{"location":"user_guide/project_details/#why-add-a-platform","text":"Why add a platform!? Because you think scrapli is awesome and want to be able to use it with whatever platform /operating system(s) you are working with of course! Scrapli is intended to be super flexible, and you can almost certainly make it work with a platform of your choosing without building a community \"platform\", for example, you can check out the example in scrapli core of connecting to a \"non core device\" here this example predates scrapli communities existence, and worked just fine! So, again, why build a platform? Convenience and community mostly! Without a scrapli community platform, you will need to pass all of the appropriate arguments to build a connection each time you instantiated a scrapli connection object. Sure that is relatively easy (copy/paste!), however its a little cumbersome. Once a scrapli community platform is created, you can simply reference the platform type and then provide only the necessary arguments such as host and authentication information to your object instantiation. For example, (from the non core device example link above) without a scrapli community platform we may have to create our device connection like so: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def wlc_on_open(cls): \"\"\"Example `on_open` function for use with cisco wlc\"\"\" # time.sleeps here are just because my test device was a bit sluggish, without these scrapli is # just going to send the username/password right away time.sleep(0.25) cls.channel.write(cls.auth_username) cls.channel.send_return() time.sleep(0.25) cls.channel.write(cls.auth_password) cls.channel.send_return() wlc = { \"host\": \"1.2.3.4\", \"auth_username\": \"some_username\", \"auth_password\": \"some_password\", \"auth_strict_key\": False, \"auth_bypass\": True, # set a custom \"on_open\" function to deal with the non-standard login \"on_open\": wlc_on_open, # set a custom \"comms_prompt_pattern\" to deal with the non-standard prompt pattern \"comms_prompt_pattern\": r\"^\\(Cisco Controller\\) >$\", } conn = GenericDriver(**wlc) With a community platform created our connection creation may end up being as simple as: 1 2 3 4 5 6 7 8 9 wlc = { \"host\": \"1.2.3.4\", \"auth_username\": \"some_username\", \"auth_password\": \"some_password\", \"auth_strict_key\": False, \"platform\": \"cisco_wlc\" } conn = Scrapli(**wlc)","title":"Why add a Platform"},{"location":"user_guide/project_details/#related-scrapli-libraries","text":"This repo is the \"community\" platform repository for scrapli, you can find more out about the other scrapli libraries, including scrapli \"core\", below: scrapli scrapli_netconf scrapli_cfg scrapli_replay nornir_scrapli","title":"Related Scrapli Libraries"},{"location":"user_guide/quickstart/","text":"Quick Start Guide \u00b6 Installation \u00b6 In most cases installation via pip is the simplest and best way to install scrapli-community. 1 pip install scrapli-community A Simple Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 from scrapli import Scrapli my_device = { \"host\" : \"172.18.0.11\" , \"auth_username\" : \"vrnetlab\" , \"auth_password\" : \"VR-netlab9\" , \"auth_strict_key\" : False , \"platform\" : \"ruckus_fastiron\" } conn = Scrapli ( ** my_device ) conn . open ()","title":"Quick Start Guide"},{"location":"user_guide/quickstart/#quick-start-guide","text":"","title":"Quick Start Guide"},{"location":"user_guide/quickstart/#installation","text":"In most cases installation via pip is the simplest and best way to install scrapli-community. 1 pip install scrapli-community","title":"Installation"},{"location":"user_guide/quickstart/#a-simple-example","text":"1 2 3 4 5 6 7 8 9 10 11 12 from scrapli import Scrapli my_device = { \"host\" : \"172.18.0.11\" , \"auth_username\" : \"vrnetlab\" , \"auth_password\" : \"VR-netlab9\" , \"auth_strict_key\" : False , \"platform\" : \"ruckus_fastiron\" } conn = Scrapli ( ** my_device ) conn . open ()","title":"A Simple Example"},{"location":"user_guide/versioning/","text":"Versioning \u00b6 Please see the scrapli \"core\" here documentation for versioning information.","title":"Versioning"},{"location":"user_guide/versioning/#versioning","text":"Please see the scrapli \"core\" here documentation for versioning information.","title":"Versioning"}]}